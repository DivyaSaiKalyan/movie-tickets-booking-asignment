var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.139,1,2.099]],["body/controllers/AppController.html",[0,1.928,1,3.553,2,1.59,3,0.293,4,0.293,5,0.293,6,3.769,7,0.549,8,0.031,9,0.835,10,3.139,11,3.769,12,0.344,13,0.063,14,2.405,15,1.72,16,3.769,17,0.764,18,1.163,19,4.499,20,0.025,21,0.025]],["title/modules/AppModule.html",[22,1.232,23,2.099]],["body/modules/AppModule.html",[1,3.307,2,1.583,3,0.216,4,0.216,5,0.216,7,0.621,8,0.031,9,0.615,10,3.133,11,2.773,12,0.253,13,0.046,20,0.02,21,0.02,22,1.712,23,4.186,24,1.487,25,2.013,26,2.773,27,2.773,28,2.773,29,3.444,30,3.444,31,3.444,32,3.444,33,2.395,34,1.769,35,1.769,36,3.31,37,2.632,38,2.632,39,3.31,40,3.31,41,1.945,42,1.265,43,2.42,44,3.31,45,3.31,46,3.31,47,3.31,48,3.31,49,0.375,50,3.31,51,2.156,52,3.31,53,2.42,54,3.31,55,2.156,56,3.31,57,1.619,58,3.31,59,2.156,60,3.31,61,3.31,62,2.395,63,3.31]],["title/injectables/AppService.html",[10,1.723,64,0.833]],["body/injectables/AppService.html",[3,0.304,4,0.304,5,0.304,7,0.469,8,0.03,9,0.867,10,2.982,12,0.357,13,0.065,16,3.911,17,0.793,18,1.207,20,0.025,21,0.025,64,1.443,65,2.098,66,3.911,67,4.668,68,4.668]],["title/classes/HttpExceptionFilter.html",[13,0.045,69,2.356]],["body/classes/HttpExceptionFilter.html",[3,0.237,4,0.237,5,0.237,7,0.48,8,0.03,9,0.676,12,0.279,13,0.074,20,0.022,21,0.022,49,0.412,51,3.468,69,3.489,70,1.946,71,3.05,72,0.279,73,1.444,74,2.804,75,4.773,76,4.773,77,3.999,78,3.489,79,5.326,80,0.46,81,1.56,82,4.462,83,4.773,84,5.653,85,5.653,86,0.676,87,3.641,88,1.101,89,1.018,90,1.101,91,3.641,92,1.101,93,3.05,94,3.999,95,2.804,96,1.946,97,3.641,98,2.34,99,3.641,100,3.641,101,3.641,102,3.641,103,4.773,104,3.641,105,3.641,106,3.05,107,3.641,108,1.19,109,3.641,110,3.641,111,3.641,112,3.05,113,3.641]],["title/classes/JwtServiceClass.html",[13,0.045,114,1.723]],["body/classes/JwtServiceClass.html",[3,0.152,4,0.152,5,0.152,7,0.499,8,0.031,12,0.178,13,0.032,14,1.244,15,0.89,17,0.709,18,1.08,20,0.016,21,0.016,49,0.525,70,1.244,72,0.355,80,0.294,81,1.139,82,1.951,86,0.861,88,1.403,89,1.298,90,1.403,92,1.577,95,3.175,96,2.479,98,1.443,112,1.951,114,1.863,115,1.951,116,4.349,117,2.048,118,2.045,119,3.485,120,2.92,121,3.485,122,1.718,123,3.485,124,3.485,125,3.485,126,1.368,127,2.328,128,5.682,129,2.328,130,3.485,131,2.245,132,2.328,133,2.92,134,4.985,135,1.232,136,2.27,137,1.332,138,3.485,139,2.328,140,1.705,141,4.178,142,4.178,143,3.5,144,4.178,145,4.178,146,4.178,147,3.39,148,3.5,149,3.5,150,2.92,151,2.454,152,3.485,153,2.328,154,5.213,155,3.485,156,3.485,157,1.92,158,2.328,159,1.368,160,2.328,161,2.328,162,0.823,163,2.328,164,3.485,165,1.244,166,2.328,167,2.328,168,2.328]],["title/injectables/LoggerMiddleware.html",[64,0.833,169,2.356]],["body/injectables/LoggerMiddleware.html",[3,0.35,4,0.209,5,0.209,7,0.44,8,0.031,9,0.594,12,0.245,13,0.044,18,1.132,20,0.02,21,0.02,49,0.362,64,1.132,65,1.437,72,0.245,73,1.324,78,2.339,80,0.405,81,1.431,86,0.813,88,0.968,89,0.895,90,0.968,92,0.968,93,3.668,94,4.861,95,3.553,96,1.71,98,2.221,106,4.181,108,1.431,118,1.986,169,3.2,170,2.68,171,5.802,172,2.34,173,4.377,174,4.377,175,1.812,176,2.667,177,4.377,178,4.377,179,3.922,180,5.366,181,3.199,182,2.339,183,2.339,184,4.377,185,3.199,186,4.377,187,3.199,188,4.99,189,3.199,190,3.199,191,3.199,192,3.199,193,4.99,194,3.199,195,3.199,196,4.377,197,4.377]],["title/classes/LoginDto.html",[13,0.045,198,1.894]],["body/classes/LoginDto.html",[3,0.249,4,0.249,5,0.249,7,0.495,8,0.03,12,0.292,13,0.068,17,0.978,20,0.022,21,0.022,49,0.558,57,2.914,70,2.042,72,0.292,80,0.483,86,0.915,135,1.74,175,2.039,198,2.894,199,3.2,200,4.925,201,4.126,202,4.925,203,6.102,204,4.925,205,1.61,206,3.185,207,1.882,208,3.82,209,3.82,210,3.82,211,3.82,212,3.202,213,1.46,214,4.126,215,3.6,216,2.244]],["title/classes/Maintenance.html",[13,0.045,217,1.723]],["body/classes/Maintenance.html",[3,0.2,4,0.2,5,0.2,7,0.309,8,0.031,12,0.235,13,0.043,17,1.017,20,0.019,21,0.019,49,0.627,62,2.275,70,1.642,72,0.235,80,0.389,86,1.029,108,1.004,172,2.275,175,1.762,182,3.855,205,1.392,207,2.117,217,2.819,218,2.574,219,1.392,220,4.257,221,3.567,222,2.501,223,4.885,224,4.885,225,5.539,226,4.885,227,4.885,228,3.791,229,3.072,230,6.157,231,4.257,232,5.274,233,2.574,234,3.072,235,4.257,236,3.567,237,3.072,238,3.072,239,4.257,240,3.072,241,4.257,242,1.004,243,3.072]],["title/entities/Movie.html",[219,1.054,244,1.232]],["body/entities/Movie.html",[3,0.194,4,0.194,5,0.194,7,0.523,8,0.031,12,0.228,13,0.067,17,1.039,18,0.77,20,0.019,21,0.019,49,0.66,72,0.228,80,0.376,86,1.082,108,0.973,122,0.9,159,2.822,175,1.724,207,2.226,212,3.333,213,1.138,217,2.226,219,1.701,228,3.333,242,0.973,244,1.988,245,1.749,246,2.494,247,4.803,248,3.128,249,4.024,250,4.803,251,2.162,252,2.349,253,2.226,254,3.128,255,2.976,256,4.587,257,2.976,258,2.976,259,2.976,260,2.976,261,2.494,262,4.164,263,3.489,264,2.976,265,2.976,266,2.976,267,4.164,268,3.489,269,2.976,270,2.176,271,2.176,272,2.494,273,2.976,274,4.164,275,2.176,276,1.938,277,2.976]],["title/controllers/MovieController.html",[0,1.139,278,2.099]],["body/controllers/MovieController.html",[0,1.529,2,0.874,3,0.238,4,0.161,5,0.161,7,0.48,8,0.031,9,0.459,12,0.189,13,0.034,14,1.321,15,0.945,17,1.023,18,1.235,20,0.017,21,0.017,49,0.541,72,0.189,73,1.71,80,0.313,81,1.191,86,0.887,88,1.445,89,1.582,90,1.445,92,1.71,118,1.998,122,1.822,135,1.529,137,1.826,140,2.117,157,2.206,162,1.688,207,1.826,213,0.945,244,2.395,248,3.47,251,1.288,252,2.766,278,2.373,279,2.071,280,1.61,281,3.053,282,3.626,283,3.053,284,3.053,285,2.071,286,3.644,287,2.472,288,2.373,289,2.071,290,3.644,291,2.472,292,2.071,293,3.644,294,2.472,295,3.644,296,2.071,297,3.644,298,2.472,299,1.61,300,1.61,301,1.945,302,2.071,303,1.452,304,1.61,305,2.472,306,2.472,307,2.472,308,2.472,309,2.472,310,2.472,311,2.472,312,2.472,313,2.472,314,2.472,315,2.472]],["title/modules/MovieModule.html",[22,1.232,29,1.894]],["body/modules/MovieModule.html",[2,1.706,3,0.242,4,0.242,5,0.242,7,0.62,8,0.031,9,0.688,12,0.284,13,0.052,20,0.022,21,0.022,22,2.176,24,1.665,25,2.17,29,3.672,33,2.581,34,1.981,35,1.981,37,2.837,38,2.177,41,2.177,42,1.416,72,0.284,205,1.579,244,2.053,251,1.706,278,3.498,301,2.719,302,3.105,303,2.177,316,3.105,317,3.105,318,2.313,319,3.706,320,4.829,321,3.145,322,3.706,323,2.413,324,2.177,325,3.706]],["title/injectables/MovieService.html",[64,0.833,301,1.448]],["body/injectables/MovieService.html",[3,0.128,4,0.128,5,0.128,7,0.463,8,0.031,9,0.365,12,0.15,13,0.027,15,1.17,17,1.007,18,1.19,20,0.014,21,0.014,42,0.75,49,0.552,64,0.791,65,0.882,72,0.15,73,1.673,74,2.494,80,0.248,81,1,86,0.905,88,1.474,89,1.364,90,1.474,92,1.636,98,2.107,108,1.593,117,1.798,118,1.954,122,1.793,126,1.798,135,1.328,137,1.759,140,1.496,157,1.905,162,1.799,165,2.459,176,1.635,222,2.209,242,0.642,244,2.306,248,3.727,251,1.328,252,2.755,281,2.564,282,2.564,283,2.564,284,2.564,285,2.564,288,1.993,289,2.564,292,2.564,296,2.564,301,1.375,303,1.153,318,1.946,323,1.279,326,1.645,327,3.06,328,1.963,329,2.494,330,1.963,331,3.06,332,1.963,333,1.963,334,1.963,335,3.06,336,3.06,337,1.963,338,3.06,339,1.963,340,1.645,341,1.279,342,1.963,343,2.237,344,1.645,345,2.564,346,1.435,347,3.76,348,1.963,349,1.645,350,1.963,351,1.435,352,1.963,353,1.963,354,4.72,355,3.06,356,2.237,357,3.76,358,3.06,359,1.963,360,1.963,361,1.963,362,1.435,363,1.435]],["title/entities/Payment.html",[219,1.054,364,1.448]],["body/entities/Payment.html",[3,0.19,4,0.19,5,0.19,7,0.478,8,0.03,12,0.224,13,0.066,17,1.035,20,0.019,21,0.019,49,0.69,55,3.096,72,0.224,80,0.369,86,1.132,131,2.298,159,2.793,175,1.701,207,2.329,212,3.313,213,1.116,219,1.686,228,3.653,242,0.955,245,1.716,248,3.096,252,2.325,253,3.161,254,3.096,256,4.555,364,2.318,365,2.447,366,4.754,367,4.754,368,4.754,369,4.754,370,4.754,371,2.92,372,2.92,373,2.92,374,2.92,375,2.92,376,2.92,377,2.92,378,2.92,379,2.92,380,4.109,381,2.92,382,2.92,383,4.109,384,2.92]],["title/controllers/PaymentController.html",[0,1.139,385,2.099]],["body/controllers/PaymentController.html",[0,1.855,2,1.25,3,0.231,4,0.231,5,0.231,7,0.562,8,0.031,9,0.657,12,0.271,13,0.049,14,1.89,15,1.352,17,0.892,18,0.915,20,0.021,21,0.021,49,0.4,72,0.271,73,1.416,80,0.447,81,1.531,86,0.657,88,1.07,89,0.989,90,1.07,92,1.416,118,1.655,122,1.588,135,1.855,137,1.352,157,2.174,162,1.25,206,3.108,207,1.352,213,1.352,280,2.303,299,2.303,300,2.303,304,2.303,364,2.738,385,3.05,386,2.963,387,3.924,388,2.963,389,4.683,390,3.537,391,3.423,392,3.423,393,2.806,394,2.963,395,2.303,396,3.537,397,3.537,398,3.537,399,2.963,400,3.537]],["title/modules/PaymentModule.html",[22,1.232,30,1.894]],["body/modules/PaymentModule.html",[2,1.577,3,0.215,4,0.215,5,0.215,7,0.638,8,0.031,9,0.611,12,0.252,13,0.046,20,0.02,21,0.02,22,2.076,24,1.479,25,2.006,30,3.728,33,2.386,34,1.76,35,1.76,37,2.623,38,1.934,41,1.934,42,1.259,72,0.252,114,2.386,131,1.706,151,1.934,172,2.386,244,1.706,251,1.577,301,2.629,303,1.934,318,2.237,323,2.144,324,1.934,364,2.276,385,3.298,393,3.128,394,2.759,395,2.144,401,2.759,402,2.759,403,2.629,404,3.293,405,3.293,406,2.759,407,2.759,408,2.407,409,3.293]],["title/injectables/PaymentService.html",[64,0.833,393,1.723]],["body/injectables/PaymentService.html",[3,0.171,4,0.171,5,0.171,7,0.564,8,0.031,9,0.486,12,0.2,13,0.062,15,1.876,17,0.76,18,0.677,20,0.017,21,0.017,42,1.001,49,0.43,64,0.983,65,1.176,72,0.2,73,1.149,80,0.331,81,1.242,86,0.706,88,1.149,89,1.063,90,1.149,92,1.149,98,2.158,108,1.242,117,2.233,118,1.343,122,1.353,126,2.233,135,1.581,137,1.001,157,1.573,162,1.735,165,1.399,176,2.624,205,1.242,206,2.624,222,2.233,242,0.856,301,2.521,318,2.144,323,1.705,329,2.884,341,1.705,343,2.778,344,2.194,351,1.914,354,3.184,364,2.582,387,3.184,388,3.184,391,2.778,392,2.778,393,2.031,395,1.705,403,2.443,406,2.194,407,2.194,410,2.194,411,2.778,412,2.778,413,2.618,414,4.474,415,2.618,416,2.618,417,2.194,418,2.618,419,2.618,420,3.748,421,2.618,422,2.194,423,2.618,424,4.474,425,2.618,426,4.909,427,2.618,428,2.618,429,3.801,430,2.618,431,2.194,432,2.618,433,2.618,434,2.618,435,2.618,436,2.618,437,2.618]],["title/interfaces/SwaggerConfig.html",[438,2.099,439,2.099]],["body/interfaces/SwaggerConfig.html",[3,0.275,4,0.275,5,0.275,8,0.029,12,0.322,17,1.117,20,0.024,21,0.024,49,0.676,72,0.47,80,0.532,172,2.25,175,2.168,205,1.376,438,2.741,439,3.41,440,4.209,441,3.526,442,2.741,443,3.077,444,3.526,445,4.998,446,4.998,447,4.998]],["title/entities/Theater.html",[219,1.054,251,1.139]],["body/entities/Theater.html",[3,0.169,4,0.169,5,0.169,7,0.521,8,0.031,12,0.198,13,0.068,17,0.973,18,0.669,20,0.017,21,0.017,49,0.672,62,2.374,72,0.374,80,0.327,86,1.102,108,0.845,122,0.782,159,2.61,175,1.559,207,2.268,212,3.431,213,0.988,215,3.792,216,1.519,217,2.013,219,1.595,228,3.431,242,0.845,244,2.268,245,1.519,249,3.722,251,1.724,252,2.172,253,3.171,254,2.893,261,2.166,263,3.155,268,3.155,270,1.89,271,1.89,272,4.089,275,1.89,276,1.684,448,2.166,449,4.442,450,4.442,451,4.442,452,4.442,453,4.442,454,4.88,455,2.585,456,2.585,457,2.585,458,4.442,459,2.585,460,2.585,461,2.585,462,3.766,463,2.585,464,2.585,465,2.585,466,2.166,467,2.585,468,2.585,469,5.187,470,2.585,471,2.166,472,2.585,473,3.766,474,2.585]],["title/controllers/TheatreController.html",[0,1.139,475,2.099]],["body/controllers/TheatreController.html",[0,1.65,2,0.999,3,0.262,4,0.184,5,0.184,7,0.511,8,0.031,9,0.525,12,0.216,13,0.039,14,1.511,15,1.081,17,0.948,18,1.208,20,0.018,21,0.018,49,0.529,59,2.615,72,0.307,73,1.215,74,2.359,80,0.358,81,1.313,86,0.867,88,1.413,89,1.307,90,1.413,92,1.688,118,1.419,122,1.805,131,1.535,135,1.65,136,2.615,137,1.785,140,2.284,157,2.105,162,1.65,207,1.785,213,1.081,251,2.219,252,2.729,280,1.841,288,3.311,299,1.841,300,1.841,304,1.841,318,1.785,324,1.661,475,2.615,476,2.369,477,2.827,478,3.365,479,3.365,480,3.365,481,2.369,482,4.016,483,2.827,484,2.369,485,4.016,486,2.827,487,2.369,488,4.016,489,2.827,490,2.369,491,2.827,492,2.827,493,2.827,494,2.827,495,2.827,496,2.827,497,2.827,498,2.827]],["title/modules/TheatreModule.html",[22,1.232,31,1.894]],["body/modules/TheatreModule.html",[2,1.772,3,0.256,4,0.256,5,0.256,7,0.618,8,0.03,9,0.73,12,0.301,13,0.055,20,0.023,21,0.023,22,2.224,24,1.765,25,2.253,31,3.612,33,2.68,34,2.1,35,2.1,37,2.946,38,2.308,41,2.308,42,1.502,72,0.301,244,1.917,251,1.952,303,2.308,318,2.35,324,2.308,475,3.597,490,3.292,499,3.929,500,3.929,501,3.929,502,3.929,503,3.929]],["title/injectables/TheatreService.html",[64,0.833,318,1.232]],["body/injectables/TheatreService.html",[3,0.167,4,0.167,5,0.167,7,0.489,8,0.031,9,0.476,12,0.196,13,0.036,15,0.98,17,0.917,18,1.143,20,0.017,21,0.017,42,0.98,49,0.55,64,0.968,65,1.152,72,0.196,73,1.633,74,2.199,80,0.324,81,1.224,86,0.903,88,1.47,89,1.36,90,1.47,92,1.633,98,2.012,108,1.445,117,2.199,118,1.907,122,1.762,126,2.199,135,1.562,137,1.69,140,2.377,157,1.83,162,1.718,165,2.001,176,1.37,205,1.224,242,0.838,251,2.144,252,2.896,288,2.438,318,1.431,321,2.438,324,1.506,329,2.856,340,2.148,341,1.67,343,3.779,345,3.136,349,2.148,351,1.874,356,2.736,362,1.874,363,1.874,411,2.736,412,2.736,478,3.136,479,3.136,480,3.136,481,3.136,484,3.136,487,3.136,504,2.148,505,2.564,506,2.564,507,3.743,508,2.564,509,2.564,510,2.564,511,2.564,512,2.564,513,2.564,514,2.564,515,3.743,516,2.564]],["title/classes/TypeOrmInterface.html",[13,0.045,517,2.099]],["body/classes/TypeOrmInterface.html",[3,0.266,4,0.266,5,0.266,8,0.029,12,0.313,13,0.057,17,1.083,20,0.023,21,0.023,49,0.689,51,3.662,53,4.111,55,3.662,57,2.75,59,3.662,70,2.183,72,0.313,80,0.516,86,1.129,135,1.443,175,2.128,205,1.335,242,1.335,253,2.747,443,2.986,444,3.422,517,3.347,518,3.422,519,4.084,520,4.084,521,4.084,522,4.084,523,4.084]],["title/entities/User.html",[131,1.232,219,1.054]],["body/entities/User.html",[3,0.177,4,0.177,5,0.177,7,0.531,8,0.031,12,0.207,13,0.054,17,0.985,20,0.018,21,0.018,49,0.623,57,2.231,62,2.082,72,0.207,80,0.343,86,1.022,89,1.276,98,1.122,108,0.886,122,1.38,131,2.103,159,2.68,162,1.377,172,2.082,175,1.613,179,1.981,205,1.274,206,2.438,207,2.103,212,3.104,213,1.036,214,3.264,215,3.646,216,1.592,217,2.082,219,1.63,221,3.264,222,2.289,228,3.104,242,0.886,245,1.592,253,2.082,254,2.971,270,1.981,271,1.981,275,1.981,276,1.765,364,2.694,431,3.264,466,3.264,471,3.264,524,1.981,525,4.562,526,2.71,527,2.71,528,2.71,529,3.896,530,2.71,531,2.71,532,2.71,533,2.71,534,2.71,535,2.71,536,3.896,537,3.896,538,3.896,539,2.71,540,2.27,541,2.27,542,2.27,543,1.981,544,2.27,545,2.27,546,2.27,547,1.765,548,1.981,549,2.71,550,3.896,551,3.896,552,3.896,553,2.71,554,3.896,555,2.71,556,2.71]],["title/controllers/UserController.html",[0,1.139,557,2.099]],["body/controllers/UserController.html",[0,1.471,2,0.818,3,0.151,4,0.151,5,0.151,7,0.523,8,0.031,9,0.43,12,0.177,13,0.032,14,1.237,15,0.885,17,0.963,18,1.196,20,0.016,21,0.016,49,0.524,57,2.423,62,1.237,72,0.266,73,1.678,80,0.293,81,1.135,86,0.859,88,1.399,89,1.294,90,1.399,92,1.678,95,3.333,96,1.237,118,1.96,122,1.797,131,2.371,135,1.96,136,2.26,137,1.768,140,2.036,151,1.36,157,2.233,162,1.634,198,2.717,206,2.78,207,1.768,213,0.885,219,1.135,280,1.508,299,2.26,300,1.508,304,1.508,346,3.381,399,1.94,403,1.871,557,2.26,558,1.94,559,3.471,560,2.908,561,3.488,562,3.488,563,2.315,564,3.471,565,2.315,566,2.908,567,1.94,568,3.471,569,2.315,570,1.94,571,3.471,572,2.315,573,2.908,574,1.94,575,3.471,576,2.315,577,2.908,578,2.315,579,3.471,580,1.94,581,1.94,582,2.315,583,2.315,584,2.315,585,2.315,586,2.315,587,2.315,588,2.315,589,2.315,590,2.315,591,2.315]],["title/modules/UserModule.html",[22,1.232,32,1.894]],["body/modules/UserModule.html",[2,1.677,3,0.235,4,0.235,5,0.235,7,0.625,8,0.031,9,0.67,12,0.276,13,0.05,20,0.022,21,0.022,22,2.153,24,1.621,25,2.132,32,3.53,33,2.537,34,1.929,35,1.929,37,2.788,38,2.12,41,2.12,42,1.379,72,0.276,114,2.537,131,2.027,147,2.638,151,2.12,205,1.551,321,3.091,364,2.132,395,2.35,403,2.7,408,2.638,557,3.453,580,3.023,592,3.609,593,3.609,594,3.609,595,3.976,596,3.609,597,3.609,598,3.609,599,3.609,600,3.609,601,3.609,602,3.609,603,3.609,604,3.609]],["title/injectables/UserService.html",[64,0.833,403,1.448]],["body/injectables/UserService.html",[3,0.115,4,0.115,5,0.115,7,0.491,8,0.031,9,0.327,12,0.135,13,0.025,15,1.074,17,0.946,18,1.13,20,0.013,21,0.013,42,0.674,49,0.527,57,2.724,62,0.942,64,0.727,65,0.792,72,0.268,73,1.655,74,1.651,80,0.223,81,0.919,86,0.864,88,1.408,89,1.302,90,1.408,92,1.621,95,2.869,96,0.942,98,2.218,108,1.307,114,2.61,116,2.923,117,1.651,118,1.893,120,2.354,122,1.753,126,1.651,131,2.398,134,2.354,135,1.726,136,1.83,137,1.67,140,1.374,143,1.477,151,1.035,157,1.927,162,1.792,165,1.873,176,1.502,179,1.288,198,2.349,205,0.919,206,2.977,219,0.919,242,0.576,321,1.83,329,2.349,341,1.148,346,2.923,356,2.054,362,1.288,363,1.288,403,1.263,408,1.288,411,2.054,412,2.054,417,1.477,420,3.66,422,1.477,540,1.477,541,1.477,542,1.477,543,1.288,544,1.477,545,1.477,546,1.477,547,1.83,548,1.288,560,2.354,561,2.354,562,2.354,566,2.354,567,2.354,570,2.354,573,2.354,574,2.354,577,2.354,581,1.477,605,1.288,606,2.81,607,2.81,608,1.762,609,1.762,610,2.81,611,1.762,612,2.81,613,1.762,614,1.762,615,2.81,616,2.81,617,2.81,618,1.762,619,1.762,620,1.477,621,1.762,622,1.762,623,1.762,624,1.762,625,1.762,626,1.762,627,1.762,628,2.81,629,1.762,630,1.762,631,1.762,632,1.762,633,1.762,634,1.762,635,1.762,636,2.81,637,2.81,638,2.81,639,1.762,640,1.762,641,1.762]],["title/injectables/ValidationPipe.html",[64,0.833,642,2.356]],["body/injectables/ValidationPipe.html",[3,0.216,4,0.216,5,0.216,7,0.511,8,0.031,9,0.616,12,0.254,13,0.071,17,0.564,18,1.315,20,0.021,21,0.021,49,0.508,64,1.161,65,1.491,72,0.254,73,1.357,78,2.426,80,0.42,81,1.467,86,0.833,88,1.357,89,1.256,90,1.357,92,1.357,98,2.105,108,1.085,118,1.586,122,1.538,137,1.269,162,1.173,165,1.774,176,2.718,183,3.983,201,3.76,216,1.95,233,2.781,236,4.261,253,1.774,276,2.161,443,2.426,642,3.281,643,2.781,644,5.086,645,4.488,646,4.488,647,4.488,648,4.488,649,3.319,650,5.086,651,4.488,652,5.448,653,3.319,654,4.488,655,3.319,656,3.319,657,2.781,658,3.319,659,3.319,660,3.319,661,3.319,662,3.319,663,2.781,664,3.319,665,3.319,666,3.319]],["title/coverage.html",[667,3.216]],["body/coverage.html",[0,1.936,1,1.943,5,0.195,6,2.5,8,0.03,10,1.595,13,0.076,20,0.019,21,0.019,43,2.181,49,0.338,64,1.507,66,2.5,69,2.181,71,2.5,108,0.975,114,1.595,115,2.5,131,1.14,169,2.181,170,2.5,198,1.753,199,2.5,217,1.595,218,2.5,219,1.702,244,1.14,246,2.5,251,1.054,278,1.943,279,2.5,301,1.341,318,1.14,326,2.5,364,1.341,365,2.5,385,1.943,386,2.5,393,1.595,403,1.341,410,2.5,438,1.943,439,1.943,441,2.5,448,2.5,475,1.943,476,2.5,504,2.5,517,1.943,518,2.5,524,3.049,547,2.716,557,1.943,558,2.5,605,3.049,642,2.181,643,2.5,663,4.363,667,2.181,668,2.984,669,2.984,670,2.984,671,2.984,672,2.984,673,4.171,674,4.171,675,4.171,676,4.171,677,2.5,678,4.363,679,6.332,680,5.947,681,2.984,682,2.984,683,2.5,684,2.5,685,2.984,686,2.984,687,2.5,688,3.495,689,2.5,690,2.984,691,5.208,692,4.171,693,4.171,694,4.171,695,2.984,696,2.984,697,2.984,698,2.984,699,2.984,700,2.5,701,2.5,702,2.984,703,2.984]],["title/dependencies.html",[25,1.742,704,2.691]],["body/dependencies.html",[8,0.031,9,0.771,13,0.072,20,0.024,21,0.024,25,1.866,42,1.587,96,2.776,116,3.036,147,3.036,150,3.479,213,1.587,216,2.44,242,1.357,442,2.704,657,3.479,705,5.937,706,4.153,707,4.153,708,4.153,709,4.153,710,4.153,711,4.153,712,4.153,713,4.153,714,4.153,715,4.153,716,4.153,717,4.153,718,4.153,719,4.153,720,4.153,721,4.153,722,4.153,723,4.153,724,4.153,725,4.153,726,4.153,727,4.153,728,4.153,729,4.153]],["title/miscellaneous/functions.html",[730,1.753,731,3.248]],["body/miscellaneous/functions.html",[8,0.028,20,0.025,21,0.025,49,0.511,72,0.346,73,1.366,80,0.571,88,1.366,89,1.263,90,1.366,92,1.366,133,4.581,148,3.783,149,3.783,442,3.561,687,3.783,688,3.783,689,4.581,700,3.783,701,4.928,730,2.941,731,3.783,732,4.515,733,4.515,734,4.515,735,5.468,736,3.301,737,4.515,738,4.515,739,4.515,740,4.515]],["title/index.html",[80,0.34,741,2.691,742,2.691]],["body/index.html",[4,0.245,8,0.03,20,0.022,21,0.022,72,0.287,77,3.142,205,1.226,329,2.204,543,2.742,667,2.742,736,2.742,743,3.751,744,3.751,745,4.867,746,3.751,747,3.751,748,3.751,749,3.751,750,3.751,751,3.751,752,5.403,753,3.751,754,3.751,755,6.181,756,3.751,757,3.751,758,6.072,759,3.751,760,3.751,761,4.867,762,3.751,763,3.751,764,3.751,765,3.751,766,4.867,767,4.867,768,3.751,769,3.751,770,3.751,771,4.867,772,4.867,773,3.751,774,3.751,775,3.751,776,3.751,777,3.142,778,3.751,779,3.751,780,3.751,781,3.751,782,3.751,783,3.751,784,3.751,785,3.751,786,3.751,787,3.751,788,3.751,789,3.751,790,3.751,791,3.751,792,3.751,793,3.751,794,3.751]],["title/modules.html",[24,1.977]],["body/modules.html",[8,0.026,20,0.026,21,0.026,23,3.052,24,2.105,29,2.753,30,2.753,31,2.753,32,2.753,777,5.299,795,6.324,796,6.324,797,6.324]],["title/overview.html",[798,3.686]],["body/overview.html",[2,1.302,8,0.03,10,2.863,20,0.022,21,0.022,23,4.204,24,1.655,25,2.161,26,3.086,27,3.086,28,3.086,29,3.616,30,3.769,31,3.461,32,3.461,33,2.571,34,1.969,35,1.969,65,1.655,70,1.969,245,2.164,301,2.552,316,3.086,317,3.086,318,2.252,393,2.863,401,3.086,402,3.086,403,2.552,438,2.399,798,3.086,799,5.356,800,3.684,801,3.684,802,3.684]],["title/miscellaneous/variables.html",[730,1.753,803,3.248]],["body/miscellaneous/variables.html",[3,0.253,8,0.03,20,0.023,21,0.023,43,3.636,49,0.563,51,2.527,53,2.836,55,2.527,57,2.433,59,2.527,72,0.297,73,1.504,80,0.491,172,2.074,182,4.234,183,4.234,205,1.626,222,2.279,242,1.268,244,1.901,391,2.836,392,3.636,439,2.527,442,2.527,445,3.251,446,3.251,447,3.251,517,2.527,524,2.836,547,3.9,548,3.636,595,3.251,605,2.836,620,3.251,677,3.251,678,3.251,683,3.251,684,4.168,730,2.527,736,2.836,803,3.251,804,3.88,805,3.88,806,3.88,807,3.88,808,3.88,809,3.88,810,3.88,811,3.88,812,3.88,813,3.88,814,4.974,815,3.88]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":663,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.1.13",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["0.2.41",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":802,"title":{},"body":{"overview.html":{}}}],["1.0",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.6",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":552,"title":{},"body":{"entities/User.html":{}}}],["100",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["2.3.3",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3h",{"_index":604,"title":{},"body":{"modules/UserModule.html":{}}}],["4",{"_index":800,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":799,"title":{},"body":{"overview.html":{}}}],["5.2.0",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":801,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["add",{"_index":288,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{}}}],["addmovie",{"_index":281,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["addmovie(@body",{"_index":307,"title":{},"body":{"controllers/MovieController.html":{}}}],["addmovie(data",{"_index":285,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["addmovie(movie",{"_index":472,"title":{},"body":{"entities/Theater.html":{}}}],["addpayment(payment",{"_index":553,"title":{},"body":{"entities/User.html":{}}}],["addtheater",{"_index":478,"title":{},"body":{"controllers/TheatreController.html":{},"injectables/TheatreService.html":{}}}],["addtheater(@body",{"_index":493,"title":{},"body":{"controllers/TheatreController.html":{}}}],["addtheater(data",{"_index":481,"title":{},"body":{"controllers/TheatreController.html":{},"injectables/TheatreService.html":{}}}],["addtheater(theater",{"_index":273,"title":{},"body":{"entities/Movie.html":{}}}],["agent",{"_index":191,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["amazing",{"_index":778,"title":{},"body":{"index.html":{}}}],["apiproperty",{"_index":212,"title":{},"body":{"classes/LoginDto.html":{},"entities/Movie.html":{},"entities/Payment.html":{},"entities/Theater.html":{},"entities/User.html":{}}}],["apitags",{"_index":304,"title":{},"body":{"controllers/MovieController.html":{},"controllers/PaymentController.html":{},"controllers/TheatreController.html":{},"controllers/UserController.html":{}}}],["apitags('movie",{"_index":305,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags('payment",{"_index":396,"title":{},"body":{"controllers/PaymentController.html":{}}}],["apitags('theater",{"_index":491,"title":{},"body":{"controllers/TheatreController.html":{}}}],["apitags('user",{"_index":582,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":736,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":751,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":23,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":652,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":85,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":276,"title":{},"body":{"entities/Movie.html":{},"entities/Theater.html":{},"entities/User.html":{},"injectables/ValidationPipe.html":{}}}],["async",{"_index":122,"title":{},"body":{"classes/JwtServiceClass.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["author",{"_index":787,"title":{},"body":{"index.html":{}}}],["autoloadentities",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["avaliabale",{"_index":321,"title":{},"body":{"modules/MovieModule.html":{},"injectables/TheatreService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["avaliable",{"_index":222,"title":{},"body":{"classes/Maintenance.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":162,"title":{},"body":{"classes/JwtServiceClass.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["backers",{"_index":779,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":655,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":664,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["balcony",{"_index":428,"title":{},"body":{"injectables/PaymentService.html":{}}}],["balconyprice",{"_index":449,"title":{},"body":{"entities/Theater.html":{}}}],["based",{"_index":173,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["bcrypt",{"_index":547,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare(data.password",{"_index":629,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(this.password",{"_index":551,"title":{},"body":{"entities/User.html":{}}}],["bcryptjs",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["beforeinsert",{"_index":536,"title":{},"body":{"entities/User.html":{}}}],["beforeupdate",{"_index":537,"title":{},"body":{"entities/User.html":{}}}],["bench",{"_index":430,"title":{},"body":{"injectables/PaymentService.html":{}}}],["benchprice",{"_index":450,"title":{},"body":{"entities/Theater.html":{}}}],["body",{"_index":299,"title":{},"body":{"controllers/MovieController.html":{},"controllers/PaymentController.html":{},"controllers/TheatreController.html":{},"controllers/UserController.html":{}}}],["book",{"_index":391,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"miscellaneous/variables.html":{}}}],["booking",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bookingtickets",{"_index":387,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["bookingtickets(@body",{"_index":398,"title":{},"body":{"controllers/PaymentController.html":{}}}],["bookingtickets(data",{"_index":388,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["boolean",{"_index":236,"title":{},"body":{"classes/Maintenance.html":{},"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":701,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":425,"title":{},"body":{"injectables/PaymentService.html":{}}}],["boxprice",{"_index":451,"title":{},"body":{"entities/Theater.html":{}}}],["browse",{"_index":797,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":795,"title":{},"body":{"modules.html":{}}}],["building",{"_index":746,"title":{},"body":{"index.html":{}}}],["business",{"_index":411,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{}}}],["cascade",{"_index":272,"title":{},"body":{"entities/Movie.html":{},"entities/Theater.html":{}}}],["cascade'})@jointable",{"_index":264,"title":{},"body":{"entities/Movie.html":{}}}],["catch",{"_index":82,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{}}}],["catch(exception",{"_index":83,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":97,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["class",{"_index":13,"title":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"classes/TypeOrmInterface.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":70,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"classes/TypeOrmInterface.html":{},"overview.html":{}}}],["clear",{"_index":141,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["cluster_appmodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":316,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_providers",{"_index":317,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_paymentmodule",{"_index":401,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_providers",{"_index":402,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_theatremodule",{"_index":499,"title":{},"body":{"modules/TheatreModule.html":{}}}],["cluster_theatremodule_providers",{"_index":500,"title":{},"body":{"modules/TheatreModule.html":{}}}],["cluster_usermodule",{"_index":592,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":593,"title":{},"body":{"modules/UserModule.html":{}}}],["column",{"_index":228,"title":{},"body":{"classes/Maintenance.html":{},"entities/Movie.html":{},"entities/Payment.html":{},"entities/Theater.html":{},"entities/User.html":{}}}],["column()@apiproperty",{"_index":256,"title":{},"body":{"entities/Movie.html":{},"entities/Payment.html":{}}}],["column()@apiproperty()@isint",{"_index":454,"title":{},"body":{"entities/Theater.html":{}}}],["column()@apiproperty()@isstring",{"_index":458,"title":{},"body":{"entities/Theater.html":{}}}],["column()@isstring()@apiproperty",{"_index":529,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":232,"title":{},"body":{"classes/Maintenance.html":{}}}],["column({unique",{"_index":466,"title":{},"body":{"entities/Theater.html":{},"entities/User.html":{}}}],["columns",{"_index":221,"title":{},"body":{"classes/Maintenance.html":{},"entities/User.html":{}}}],["commom",{"_index":738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["common/providers/jwt.service",{"_index":408,"title":{},"body":{"modules/PaymentModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/typeorm/typeorm.config",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":320,"title":{},"body":{"modules/MovieModule.html":{}}}],["configurations",{"_index":595,"title":{},"body":{"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":98,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["constructor",{"_index":126,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{}}}],["constructor(jwtservice",{"_index":127,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["constructor(movierepository",{"_index":328,"title":{},"body":{"injectables/MovieService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"classes/JwtServiceClass.html":{},"controllers/MovieController.html":{},"controllers/PaymentController.html":{},"controllers/TheatreController.html":{},"controllers/UserController.html":{}}}],["constructor(theaterrepository",{"_index":505,"title":{},"body":{"injectables/TheatreService.html":{}}}],["constructor(userrepository",{"_index":608,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":413,"title":{},"body":{"injectables/PaymentService.html":{}}}],["contentlength",{"_index":193,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/MovieController.html":{},"controllers/PaymentController.html":{},"controllers/TheatreController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/MovieController.html":{},"controllers/PaymentController.html":{},"controllers/TheatreController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('movie",{"_index":306,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('payment",{"_index":397,"title":{},"body":{"controllers/PaymentController.html":{}}}],["controller('theatre",{"_index":492,"title":{},"body":{"controllers/TheatreController.html":{}}}],["controller('user",{"_index":583,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":150,"title":{},"body":{"classes/JwtServiceClass.html":{},"dependencies.html":{}}}],["coverage",{"_index":667,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":133,"title":{},"body":{"classes/JwtServiceClass.html":{},"miscellaneous/functions.html":{}}}],["createdat",{"_index":231,"title":{},"body":{"classes/Maintenance.html":{}}}],["createdby",{"_index":223,"title":{},"body":{"classes/Maintenance.html":{}}}],["createddate",{"_index":224,"title":{},"body":{"classes/Maintenance.html":{}}}],["createdocument",{"_index":689,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdocument(app",{"_index":734,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createjwttoken",{"_index":123,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["createjwttoken(data",{"_index":130,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["createtime",{"_index":235,"title":{},"body":{"classes/Maintenance.html":{}}}],["createuser",{"_index":559,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(@body",{"_index":584,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(data",{"_index":563,"title":{},"body":{"controllers/UserController.html":{}}}],["credentials",{"_index":632,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":99,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":102,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":101,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":135,"title":{},"body":{"classes/JwtServiceClass.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.id",{"_index":160,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["data.name",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["data.nooftickets",{"_index":433,"title":{},"body":{"injectables/PaymentService.html":{}}}],["data.seatoption",{"_index":424,"title":{},"body":{"injectables/PaymentService.html":{}}}],["data.theatername",{"_index":349,"title":{},"body":{"injectables/MovieService.html":{},"injectables/TheatreService.html":{}}}],["database",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/TheatreController.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":109,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date().tolocalestring",{"_index":243,"title":{},"body":{"classes/Maintenance.html":{}}}],["declared",{"_index":444,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{}}}],["decorators",{"_index":207,"title":{},"body":{"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":182,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":86,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":140,"title":{},"body":{"classes/JwtServiceClass.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete('deletemovie/:moviename/:theatername",{"_index":290,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete('deletetheater/:theatername",{"_index":485,"title":{},"body":{"controllers/TheatreController.html":{}}}],["delete('deleteuser/:email",{"_index":568,"title":{},"body":{"controllers/UserController.html":{}}}],["deleted",{"_index":362,"title":{},"body":{"injectables/MovieService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{}}}],["deletemovie",{"_index":282,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["deletemovie(moviename",{"_index":289,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["deletetheater",{"_index":479,"title":{},"body":{"controllers/TheatreController.html":{},"injectables/TheatreService.html":{}}}],["deletetheater(@param('theatername",{"_index":497,"title":{},"body":{"controllers/TheatreController.html":{}}}],["deletetheater(theatername",{"_index":484,"title":{},"body":{"controllers/TheatreController.html":{},"injectables/TheatreService.html":{}}}],["deletetoken",{"_index":124,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["deletetoken(response",{"_index":138,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["deleteuser",{"_index":560,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@param('email",{"_index":588,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(email",{"_index":567,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":72,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["details",{"_index":423,"title":{},"body":{"injectables/PaymentService.html":{}}}],["development",{"_index":757,"title":{},"body":{"index.html":{}}}],["disable",{"_index":541,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["document",{"_index":740,"title":{},"body":{"miscellaneous/functions.html":{}}}],["documentation",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["dto/login.dto",{"_index":581,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":768,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":747,"title":{},"body":{"index.html":{}}}],["email",{"_index":206,"title":{},"body":{"classes/LoginDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entire",{"_index":76,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["entities",{"_index":245,"title":{},"body":{"entities/Movie.html":{},"entities/Payment.html":{},"entities/Theater.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/movies.entity",{"_index":303,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{}}}],["entities/payment.entity",{"_index":395,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/UserModule.html":{}}}],["entities/theater.entity",{"_index":324,"title":{},"body":{"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{}}}],["entities/user.entity",{"_index":151,"title":{},"body":{"classes/JwtServiceClass.html":{},"modules/PaymentModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":219,"title":{"entities/Movie.html":{},"entities/Payment.html":{},"entities/Theater.html":{},"entities/User.html":{}},"body":{"classes/Maintenance.html":{},"entities/Movie.html":{},"entities/Payment.html":{},"entities/Theater.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["error",{"_index":164,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["errors",{"_index":660,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":662,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["eslint",{"_index":540,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["eslint/no",{"_index":544,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["exception",{"_index":91,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":104,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":113,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":79,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptions",{"_index":75,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["expiresin",{"_index":603,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["express",{"_index":96,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["extends",{"_index":271,"title":{},"body":{"entities/Movie.html":{},"entities/Theater.html":{},"entities/User.html":{}}}],["failed",{"_index":665,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["false",{"_index":631,"title":{},"body":{"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["find",{"_index":74,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/MovieService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{}}}],["findmovies",{"_index":283,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["findmovies(@param('moviename",{"_index":311,"title":{},"body":{"controllers/MovieController.html":{}}}],["findmovies(moviename",{"_index":292,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["findonemovie",{"_index":327,"title":{},"body":{"injectables/MovieService.html":{}}}],["findonemovie(moviename",{"_index":336,"title":{},"body":{"injectables/MovieService.html":{}}}],["findtheater",{"_index":480,"title":{},"body":{"controllers/TheatreController.html":{},"injectables/TheatreService.html":{}}}],["findtheater(@param('theatername",{"_index":495,"title":{},"body":{"controllers/TheatreController.html":{}}}],["findtheater(theatername",{"_index":487,"title":{},"body":{"controllers/TheatreController.html":{},"injectables/TheatreService.html":{}}}],["finduser",{"_index":606,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(email",{"_index":612,"title":{},"body":{"injectables/UserService.html":{}}}],["finsd",{"_index":295,"title":{},"body":{"controllers/MovieController.html":{}}}],["found",{"_index":356,"title":{},"body":{"injectables/MovieService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":745,"title":{},"body":{"index.html":{}}}],["function",{"_index":688,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":731,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":120,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/UserService.html":{}}}],["generates",{"_index":230,"title":{},"body":{"classes/Maintenance.html":{}}}],["get('findmovie/:moviename",{"_index":293,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('findmoviebytheater/:theatername",{"_index":297,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('findtheater/:theatername",{"_index":488,"title":{},"body":{"controllers/TheatreController.html":{}}}],["gethello",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmovie",{"_index":354,"title":{},"body":{"injectables/MovieService.html":{},"injectables/PaymentService.html":{}}}],["getmovie.moviename",{"_index":360,"title":{},"body":{"injectables/MovieService.html":{}}}],["getmovie.theatername",{"_index":361,"title":{},"body":{"injectables/MovieService.html":{}}}],["getmoviebytheater",{"_index":284,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["getmoviebytheater(@param('theatername",{"_index":309,"title":{},"body":{"controllers/MovieController.html":{}}}],["getmoviebytheater(theatername",{"_index":296,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["gettheater",{"_index":343,"title":{},"body":{"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{}}}],["gettheater.balconyprice",{"_index":429,"title":{},"body":{"injectables/PaymentService.html":{}}}],["gettheater.boxprice",{"_index":427,"title":{},"body":{"injectables/PaymentService.html":{}}}],["getting",{"_index":741,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":420,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["getuser.email",{"_index":435,"title":{},"body":{"injectables/PaymentService.html":{}}}],["getuser.password",{"_index":630,"title":{},"body":{"injectables/UserService.html":{}}}],["grow",{"_index":774,"title":{},"body":{"index.html":{}}}],["hash",{"_index":620,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["hello",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":205,"title":{},"body":{"classes/LoginDto.html":{},"classes/Maintenance.html":{},"modules/MovieModule.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":100,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":84,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":69,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httponly",{"_index":635,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":791,"title":{},"body":{"index.html":{}}}],["id",{"_index":159,"title":{},"body":{"classes/JwtServiceClass.html":{},"entities/Movie.html":{},"entities/Payment.html":{},"entities/Theater.html":{},"entities/User.html":{}}}],["identifier",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":78,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["imported",{"_index":148,"title":{},"body":{"classes/JwtServiceClass.html":{},"miscellaneous/functions.html":{}}}],["imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":80,"title":{"index.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":735,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":64,"title":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":341,"title":{},"body":{"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{}}}],["injectrepository(movie",{"_index":342,"title":{},"body":{"injectables/MovieService.html":{}}}],["injectrepository(payment",{"_index":418,"title":{},"body":{"injectables/PaymentService.html":{}}}],["injectrepository(theater",{"_index":511,"title":{},"body":{"injectables/TheatreService.html":{}}}],["injectrepository(user",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["inputs",{"_index":645,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["installation",{"_index":754,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":756,"title":{},"body":{"index.html":{}}}],["interface",{"_index":438,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":440,"title":{},"body":{"interfaces/SwaggerConfig.html":{}}}],["ip",{"_index":187,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["isactive",{"_index":225,"title":{},"body":{"classes/Maintenance.html":{}}}],["isemail",{"_index":214,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{}}}],["isemail()@apiproperty",{"_index":208,"title":{},"body":{"classes/LoginDto.html":{}}}],["isint",{"_index":469,"title":{},"body":{"entities/Theater.html":{}}}],["isstring",{"_index":215,"title":{},"body":{"classes/LoginDto.html":{},"entities/Theater.html":{},"entities/User.html":{}}}],["isstring()@apiproperty",{"_index":210,"title":{},"body":{"classes/LoginDto.html":{}}}],["join",{"_index":781,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":267,"title":{},"body":{"entities/Movie.html":{}}}],["jwt",{"_index":116,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["jwtmodule",{"_index":597,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":599,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtservice",{"_index":128,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["jwtserviceclass",{"_index":114,"title":{"classes/JwtServiceClass.html":{}},"body":{"classes/JwtServiceClass.html":{},"modules/PaymentModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["kamil",{"_index":788,"title":{},"body":{"index.html":{}}}],["language",{"_index":247,"title":{},"body":{"entities/Movie.html":{}}}],["length",{"_index":195,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["library",{"_index":149,"title":{},"body":{"classes/JwtServiceClass.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":794,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":772,"title":{},"body":{"index.html":{}}}],["line",{"_index":542,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["list",{"_index":347,"title":{},"body":{"injectables/MovieService.html":{}}}],["localhost",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":452,"title":{},"body":{"entities/Theater.html":{}}}],["logger",{"_index":171,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logger(loggermiddleware.name",{"_index":184,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggermiddleware",{"_index":169,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["logics",{"_index":412,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{}}}],["login",{"_index":573,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logindto",{"_index":198,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["loginuser",{"_index":561,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["loginuser(data",{"_index":570,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logout",{"_index":168,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["maintain",{"_index":204,"title":{},"body":{"classes/LoginDto.html":{}}}],["maintanance",{"_index":220,"title":{},"body":{"classes/Maintenance.html":{}}}],["maintenance",{"_index":217,"title":{"classes/Maintenance.html":{}},"body":{"classes/Maintenance.html":{},"entities/Movie.html":{},"entities/Theater.html":{},"entities/User.html":{},"coverage.html":{}}}],["maintenance.entity",{"_index":270,"title":{},"body":{"entities/Movie.html":{},"entities/Theater.html":{},"entities/User.html":{}}}],["manytomany",{"_index":268,"title":{},"body":{"entities/Movie.html":{},"entities/Theater.html":{}}}],["manytomany(undefined",{"_index":261,"title":{},"body":{"entities/Movie.html":{},"entities/Theater.html":{}}}],["manytoone",{"_index":383,"title":{},"body":{"entities/Payment.html":{}}}],["manytoone(undefined",{"_index":379,"title":{},"body":{"entities/Payment.html":{}}}],["match",{"_index":628,"title":{},"body":{"injectables/UserService.html":{}}}],["matching",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["meimport",{"_index":144,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["message",{"_index":112,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{}}}],["metadata",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":650,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":118,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["methods",{"_index":81,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["middleware",{"_index":174,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["miscellaneous",{"_index":730,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":771,"title":{},"body":{"index.html":{}}}],["mode",{"_index":761,"title":{},"body":{"index.html":{}}}],["module",{"_index":22,"title":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/movie/movie.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/payment/payment.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/theatre/theatre.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":784,"title":{},"body":{"index.html":{}}}],["movie",{"_index":244,"title":{"entities/Movie.html":{}},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/PaymentModule.html":{},"entities/Theater.html":{},"modules/TheatreModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["movie.addtheater(gettheater",{"_index":350,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.controller",{"_index":322,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.createdby",{"_index":348,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.service",{"_index":302,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["movie.theater",{"_index":462,"title":{},"body":{"entities/Theater.html":{}}}],["movie/movie.service",{"_index":407,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["movieapp",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["moviecontroller",{"_index":278,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviemodule",{"_index":29,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["moviename",{"_index":248,"title":{},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{}}}],["movierepository",{"_index":331,"title":{},"body":{"injectables/MovieService.html":{}}}],["movies",{"_index":335,"title":{},"body":{"injectables/MovieService.html":{}}}],["movies.entity",{"_index":470,"title":{},"body":{"entities/Theater.html":{}}}],["movieservice",{"_index":301,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["mysql",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":789,"title":{},"body":{"index.html":{}}}],["name",{"_index":89,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":752,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":793,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":147,"title":{},"body":{"classes/JwtServiceClass.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":213,"title":{},"body":{"classes/LoginDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":186,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["new",{"_index":108,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"entities/Theater.html":{},"injectables/TheatreService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["newdata",{"_index":351,"title":{},"body":{"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{}}}],["next",{"_index":179,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["nextfunction",{"_index":180,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["node.js",{"_index":744,"title":{},"body":{"index.html":{}}}],["noofscreens",{"_index":453,"title":{},"body":{"entities/Theater.html":{}}}],["nooftickets",{"_index":366,"title":{},"body":{"entities/Payment.html":{}}}],["notfoundexception",{"_index":340,"title":{},"body":{"injectables/MovieService.html":{},"injectables/TheatreService.html":{}}}],["notfoundexception('movie",{"_index":357,"title":{},"body":{"injectables/MovieService.html":{}}}],["notfoundexception('theater",{"_index":345,"title":{},"body":{"injectables/MovieService.html":{},"injectables/TheatreService.html":{}}}],["npm",{"_index":755,"title":{},"body":{"index.html":{}}}],["null",{"_index":275,"title":{},"body":{"entities/Movie.html":{},"entities/Theater.html":{},"entities/User.html":{}}}],["number",{"_index":253,"title":{},"body":{"entities/Movie.html":{},"entities/Payment.html":{},"entities/Theater.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/ValidationPipe.html":{}}}],["object",{"_index":201,"title":{},"body":{"classes/LoginDto.html":{},"injectables/ValidationPipe.html":{}}}],["object.assign(movie",{"_index":352,"title":{},"body":{"injectables/MovieService.html":{}}}],["object.assign(payment",{"_index":436,"title":{},"body":{"injectables/PaymentService.html":{}}}],["object.assign(theater",{"_index":513,"title":{},"body":{"injectables/TheatreService.html":{}}}],["object.assign(user",{"_index":625,"title":{},"body":{"injectables/UserService.html":{}}}],["ondelete",{"_index":263,"title":{},"body":{"entities/Movie.html":{},"entities/Theater.html":{}}}],["one",{"_index":338,"title":{},"body":{"injectables/MovieService.html":{}}}],["onetomany",{"_index":538,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":532,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":773,"title":{},"body":{"index.html":{}}}],["openapiobject",{"_index":739,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":90,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["originalurl",{"_index":188,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":798,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":704,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":157,"title":{},"body":{"classes/JwtServiceClass.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param('email",{"_index":399,"title":{},"body":{"controllers/PaymentController.html":{},"controllers/UserController.html":{}}}],["param('moviename",{"_index":313,"title":{},"body":{"controllers/MovieController.html":{}}}],["param('password",{"_index":590,"title":{},"body":{"controllers/UserController.html":{}}}],["param('theatername",{"_index":314,"title":{},"body":{"controllers/MovieController.html":{}}}],["parameters",{"_index":88,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["passport",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["passthrough",{"_index":586,"title":{},"body":{"controllers/UserController.html":{}}}],["password",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":110,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payment",{"_index":364,"title":{"entities/Payment.html":{}},"body":{"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["payment.controller",{"_index":405,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.entity",{"_index":539,"title":{},"body":{"entities/User.html":{}}}],["payment.price",{"_index":426,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payment.service",{"_index":394,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{}}}],["payment.totalprice",{"_index":432,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payment.user",{"_index":431,"title":{},"body":{"injectables/PaymentService.html":{},"entities/User.html":{}}}],["payment.username",{"_index":434,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentcontroller",{"_index":385,"title":{"controllers/PaymentController.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"coverage.html":{}}}],["paymentmodule",{"_index":30,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentrepository",{"_index":414,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentservice",{"_index":393,"title":{"injectables/PaymentService.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["phonenumber",{"_index":525,"title":{},"body":{"entities/User.html":{}}}],["pipetransform",{"_index":654,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["place",{"_index":119,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["plaintoclass",{"_index":656,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":659,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":782,"title":{},"body":{"index.html":{}}}],["port",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":300,"title":{},"body":{"controllers/MovieController.html":{},"controllers/PaymentController.html":{},"controllers/TheatreController.html":{},"controllers/UserController.html":{}}}],["post('addmovie",{"_index":286,"title":{},"body":{"controllers/MovieController.html":{}}}],["post('addtheater",{"_index":482,"title":{},"body":{"controllers/TheatreController.html":{}}}],["post('bookingmovietickets/:email",{"_index":389,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post('login",{"_index":571,"title":{},"body":{"controllers/UserController.html":{}}}],["post('register",{"_index":564,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":280,"title":{},"body":{"controllers/MovieController.html":{},"controllers/PaymentController.html":{},"controllers/TheatreController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":367,"title":{},"body":{"entities/Payment.html":{}}}],["primarygeneratedcolumn",{"_index":254,"title":{},"body":{"entities/Movie.html":{},"entities/Payment.html":{},"entities/Theater.html":{},"entities/User.html":{}}}],["private",{"_index":176,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["production",{"_index":763,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":743,"title":{},"body":{"index.html":{}}}],["project",{"_index":77,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["promise",{"_index":156,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["properties",{"_index":175,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"entities/Payment.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{}}}],["property",{"_index":203,"title":{},"body":{"classes/LoginDto.html":{}}}],["providers",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{}}}],["put",{"_index":578,"title":{},"body":{"controllers/UserController.html":{}}}],["put('updateuser/:email/:password",{"_index":575,"title":{},"body":{"controllers/UserController.html":{}}}],["rating",{"_index":249,"title":{},"body":{"entities/Movie.html":{},"entities/Theater.html":{}}}],["read",{"_index":783,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"classes/JwtServiceClass.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["recived",{"_index":155,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["reflect",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":346,"title":{},"body":{"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["registeruser",{"_index":607,"title":{},"body":{"injectables/UserService.html":{}}}],["registeruser(data",{"_index":617,"title":{},"body":{"injectables/UserService.html":{}}}],["related",{"_index":172,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"modules/PaymentModule.html":{},"interfaces/SwaggerConfig.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":329,"title":{},"body":{"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":94,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["request.get('user",{"_index":190,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request.url",{"_index":111,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["require('bcryptjs",{"_index":548,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":202,"title":{},"body":{"classes/LoginDto.html":{}}}],["requires",{"_index":546,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["res",{"_index":579,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":95,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["response.clearcookie('jwt",{"_index":166,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["response.cookie('jwt",{"_index":634,"title":{},"body":{"injectables/UserService.html":{}}}],["response.get('content",{"_index":194,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.on('finish",{"_index":192,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.status(status).json",{"_index":105,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":636,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["returns",{"_index":92,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":758,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":566,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["scalable",{"_index":748,"title":{},"body":{"index.html":{}}}],["screenno",{"_index":368,"title":{},"body":{"entities/Payment.html":{}}}],["screennumber",{"_index":250,"title":{},"body":{"entities/Movie.html":{}}}],["seatoption",{"_index":369,"title":{},"body":{"entities/Payment.html":{}}}],["secrect",{"_index":601,"title":{},"body":{"modules/UserModule.html":{}}}],["secret",{"_index":600,"title":{},"body":{"modules/UserModule.html":{}}}],["server",{"_index":749,"title":{},"body":{"index.html":{}}}],["service",{"_index":117,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{}}}],["show",{"_index":142,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["side",{"_index":750,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":602,"title":{},"body":{"modules/UserModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["sponsors",{"_index":776,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":732,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.config.ts",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":733,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.service.ts",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":71,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:13",{"_index":87,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":170,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:10",{"_index":181,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/middleware/logger.middleware.ts:8",{"_index":185,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/pipes/validation.pipes.ts",{"_index":643,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipes.ts:14",{"_index":653,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/pipes/validation.pipes.ts:26",{"_index":649,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/providers/jwt.service.ts",{"_index":115,"title":{},"body":{"classes/JwtServiceClass.html":{},"coverage.html":{}}}],["src/common/providers/jwt.service.ts:17",{"_index":132,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:27",{"_index":153,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:44",{"_index":139,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:8",{"_index":129,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/common/typeorm/typeorm.config.ts",{"_index":677,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/typeorm/typeorm.interface.ts",{"_index":518,"title":{},"body":{"classes/TypeOrmInterface.html":{},"coverage.html":{}}}],["src/common/typeorm/typeorm.interface.ts:5",{"_index":520,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/common/typeorm/typeorm.interface.ts:6",{"_index":522,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/common/typeorm/typeorm.interface.ts:7",{"_index":523,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/common/typeorm/typeorm.interface.ts:8",{"_index":521,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/common/typeorm/typeorm.interface.ts:9",{"_index":519,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/swagger/swagger.config.ts",{"_index":683,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger/swagger.interface.ts",{"_index":441,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["src/config/swagger/swagger.ts",{"_index":687,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/entities/maintenance.entity.ts",{"_index":218,"title":{},"body":{"classes/Maintenance.html":{},"coverage.html":{}}}],["src/entities/maintenance.entity.ts:11",{"_index":237,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintenance.entity.ts:16",{"_index":238,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintenance.entity.ts:21",{"_index":229,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintenance.entity.ts:26",{"_index":240,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintenance.entity.ts:31",{"_index":234,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/movies.entity.ts",{"_index":246,"title":{},"body":{"entities/Movie.html":{},"coverage.html":{}}}],["src/entities/movies.entity.ts:18",{"_index":255,"title":{},"body":{"entities/Movie.html":{}}}],["src/entities/movies.entity.ts:22",{"_index":257,"title":{},"body":{"entities/Movie.html":{}}}],["src/entities/movies.entity.ts:26",{"_index":258,"title":{},"body":{"entities/Movie.html":{}}}],["src/entities/movies.entity.ts:30",{"_index":260,"title":{},"body":{"entities/Movie.html":{}}}],["src/entities/movies.entity.ts:34",{"_index":259,"title":{},"body":{"entities/Movie.html":{}}}],["src/entities/movies.entity.ts:38",{"_index":266,"title":{},"body":{"entities/Movie.html":{}}}],["src/entities/movies.entity.ts:44",{"_index":265,"title":{},"body":{"entities/Movie.html":{}}}],["src/entities/payment.entity.ts",{"_index":365,"title":{},"body":{"entities/Payment.html":{},"coverage.html":{}}}],["src/entities/payment.entity.ts:11",{"_index":371,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/payment.entity.ts:15",{"_index":377,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/payment.entity.ts:19",{"_index":372,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/payment.entity.ts:22",{"_index":374,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/payment.entity.ts:26",{"_index":375,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/payment.entity.ts:30",{"_index":373,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/payment.entity.ts:33",{"_index":378,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/payment.entity.ts:37",{"_index":376,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/payment.entity.ts:40",{"_index":382,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/payment.entity.ts:43",{"_index":381,"title":{},"body":{"entities/Payment.html":{}}}],["src/entities/theater.entity.ts",{"_index":448,"title":{},"body":{"entities/Theater.html":{},"coverage.html":{}}}],["src/entities/theater.entity.ts:13",{"_index":460,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/theater.entity.ts:18",{"_index":468,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/theater.entity.ts:23",{"_index":461,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/theater.entity.ts:28",{"_index":465,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/theater.entity.ts:33",{"_index":464,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/theater.entity.ts:38",{"_index":457,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/theater.entity.ts:43",{"_index":455,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/theater.entity.ts:48",{"_index":456,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/theater.entity.ts:53",{"_index":459,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/theater.entity.ts:59",{"_index":463,"title":{},"body":{"entities/Theater.html":{}}}],["src/entities/user.entity",{"_index":145,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["src/entities/user.entity.ts",{"_index":524,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/user.entity.ts:22",{"_index":528,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:27",{"_index":530,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:32",{"_index":527,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:37",{"_index":535,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:42",{"_index":531,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:50",{"_index":533,"title":{},"body":{"entities/User.html":{}}}],["src/main.ts",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/movie/movie.controller.ts",{"_index":279,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/modules/movie/movie.controller.ts:20",{"_index":287,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:30",{"_index":298,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:40",{"_index":294,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:51",{"_index":291,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.module.ts",{"_index":319,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/modules/movie/movie.service.ts",{"_index":326,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{}}}],["src/modules/movie/movie.service.ts:11",{"_index":330,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:23",{"_index":332,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:41",{"_index":339,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:56",{"_index":334,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:67",{"_index":337,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:83",{"_index":333,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/payment/payment.controller.ts",{"_index":386,"title":{},"body":{"controllers/PaymentController.html":{},"coverage.html":{}}}],["src/modules/payment/payment.controller.ts:21",{"_index":390,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.module.ts",{"_index":404,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/modules/payment/payment.service.ts",{"_index":410,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["src/modules/payment/payment.service.ts:13",{"_index":415,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:28",{"_index":416,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/theatre/theatre.controller.ts",{"_index":476,"title":{},"body":{"controllers/TheatreController.html":{},"coverage.html":{}}}],["src/modules/theatre/theatre.controller.ts:19",{"_index":483,"title":{},"body":{"controllers/TheatreController.html":{}}}],["src/modules/theatre/theatre.controller.ts:28",{"_index":489,"title":{},"body":{"controllers/TheatreController.html":{}}}],["src/modules/theatre/theatre.controller.ts:38",{"_index":486,"title":{},"body":{"controllers/TheatreController.html":{}}}],["src/modules/theatre/theatre.module.ts",{"_index":501,"title":{},"body":{"modules/TheatreModule.html":{}}}],["src/modules/theatre/theatre.service.ts",{"_index":504,"title":{},"body":{"injectables/TheatreService.html":{},"coverage.html":{}}}],["src/modules/theatre/theatre.service.ts:10",{"_index":506,"title":{},"body":{"injectables/TheatreService.html":{}}}],["src/modules/theatre/theatre.service.ts:21",{"_index":508,"title":{},"body":{"injectables/TheatreService.html":{}}}],["src/modules/theatre/theatre.service.ts:33",{"_index":510,"title":{},"body":{"injectables/TheatreService.html":{}}}],["src/modules/theatre/theatre.service.ts:48",{"_index":509,"title":{},"body":{"injectables/TheatreService.html":{}}}],["src/modules/user/dto/login.dto.ts",{"_index":199,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/login.dto.ts:13",{"_index":209,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/user/dto/login.dto.ts:20",{"_index":211,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/user/user.controller.ts",{"_index":558,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:30",{"_index":565,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:41",{"_index":572,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:54",{"_index":569,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:65",{"_index":576,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":594,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":605,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/user/user.service.ts:16",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:27",{"_index":618,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:39",{"_index":614,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:56",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:71",{"_index":619,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:85",{"_index":613,"title":{},"body":{"injectables/UserService.html":{}}}],["ssageimport",{"_index":146,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["start",{"_index":759,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":762,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":764,"title":{},"body":{"index.html":{}}}],["started",{"_index":742,"title":{"index.html":{}},"body":{}}],["starter",{"_index":753,"title":{},"body":{"index.html":{}}}],["statements",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":103,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":106,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["stay",{"_index":785,"title":{},"body":{"index.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/JwtServiceClass.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["strongpassword",{"_index":549,"title":{},"body":{"entities/User.html":{}}}],["success",{"_index":143,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/UserService.html":{}}}],["successfully",{"_index":167,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["succsfully",{"_index":363,"title":{},"body":{"injectables/MovieService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{}}}],["support",{"_index":777,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":796,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":442,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["swagger_config",{"_index":684,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":439,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":445,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["taken",{"_index":136,"title":{},"body":{"classes/JwtServiceClass.html":{},"controllers/TheatreController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["teken",{"_index":615,"title":{},"body":{"injectables/UserService.html":{}}}],["template",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":767,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":770,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":769,"title":{},"body":{"index.html":{}}}],["tests",{"_index":766,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":775,"title":{},"body":{"index.html":{}}}],["theater",{"_index":251,"title":{"entities/Theater.html":{}},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/PaymentModule.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"coverage.html":{}}}],["theater.createdby",{"_index":512,"title":{},"body":{"injectables/TheatreService.html":{}}}],["theater.entity",{"_index":269,"title":{},"body":{"entities/Movie.html":{}}}],["theater.movie",{"_index":262,"title":{},"body":{"entities/Movie.html":{}}}],["theatername",{"_index":252,"title":{},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{}}}],["theaterrepository",{"_index":507,"title":{},"body":{"injectables/TheatreService.html":{}}}],["theatre",{"_index":477,"title":{},"body":{"controllers/TheatreController.html":{}}}],["theatre.controller",{"_index":502,"title":{},"body":{"modules/TheatreModule.html":{}}}],["theatre.service",{"_index":490,"title":{},"body":{"controllers/TheatreController.html":{},"modules/TheatreModule.html":{}}}],["theatre/theatre.service",{"_index":323,"title":{},"body":{"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["theatrecontroller",{"_index":475,"title":{"controllers/TheatreController.html":{}},"body":{"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"coverage.html":{}}}],["theatremodule",{"_index":31,"title":{"modules/TheatreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TheatreModule.html":{},"modules.html":{},"overview.html":{}}}],["theatreservice",{"_index":318,"title":{"injectables/TheatreService.html":{}},"body":{"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"modules/TheatreModule.html":{},"injectables/TheatreService.html":{},"coverage.html":{},"overview.html":{}}}],["this.appservice.gethello",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["this.finduser(data.email",{"_index":627,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduser(email",{"_index":637,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.signasync",{"_index":158,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":163,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["this.jwtserviceclass.createjwttoken(getuser",{"_index":633,"title":{},"body":{"injectables/UserService.html":{}}}],["this.logger.log",{"_index":196,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["this.movie",{"_index":473,"title":{},"body":{"entities/Theater.html":{}}}],["this.movie.push(movie",{"_index":474,"title":{},"body":{"entities/Theater.html":{}}}],["this.movierepository.delete",{"_index":359,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.find",{"_index":355,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.findone",{"_index":358,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.save(newdata",{"_index":353,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movieservice.addmovie(data",{"_index":308,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.deletemovie(moviename",{"_index":315,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.findmovies(moviename",{"_index":312,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.findonemovie(data.moviename",{"_index":419,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.movieservice.getmoviebytheater(theatername",{"_index":310,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.password",{"_index":550,"title":{},"body":{"entities/User.html":{}}}],["this.payment",{"_index":554,"title":{},"body":{"entities/User.html":{}}}],["this.payment.push(payment",{"_index":555,"title":{},"body":{"entities/User.html":{}}}],["this.paymentrepository.save(newdata",{"_index":437,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.paymentservice.bookingtickets(data",{"_index":400,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.theater",{"_index":274,"title":{},"body":{"entities/Movie.html":{}}}],["this.theater.push(theater",{"_index":277,"title":{},"body":{"entities/Movie.html":{}}}],["this.theaterrepository.delete",{"_index":516,"title":{},"body":{"injectables/TheatreService.html":{}}}],["this.theaterrepository.findone",{"_index":515,"title":{},"body":{"injectables/TheatreService.html":{}}}],["this.theaterrepository.save(newdata",{"_index":514,"title":{},"body":{"injectables/TheatreService.html":{}}}],["this.theatreservice.addtheater(data",{"_index":494,"title":{},"body":{"controllers/TheatreController.html":{}}}],["this.theatreservice.deletetheater(theatername",{"_index":498,"title":{},"body":{"controllers/TheatreController.html":{}}}],["this.theatreservice.findtheater(data.theatername",{"_index":344,"title":{},"body":{"injectables/MovieService.html":{},"injectables/PaymentService.html":{}}}],["this.theatreservice.findtheater(theatername",{"_index":496,"title":{},"body":{"controllers/TheatreController.html":{}}}],["this.tovalidate(metatype",{"_index":658,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.userrepository.delete",{"_index":639,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":641,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(userdata",{"_index":626,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update",{"_index":640,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.deleteuser(email",{"_index":589,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduser(email",{"_index":421,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userservice.loginuser(data",{"_index":587,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.registeruser(data",{"_index":585,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuser(email",{"_index":591,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":165,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/MovieService.html":{},"injectables/PaymentService.html":{},"injectables/TheatreService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["tickets",{"_index":392,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":107,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":446,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":134,"title":{},"body":{"classes/JwtServiceClass.html":{},"injectables/UserService.html":{}}}],["tokens",{"_index":121,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["totalprice",{"_index":370,"title":{},"body":{"entities/Payment.html":{}}}],["touch",{"_index":786,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":646,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":648,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transfer",{"_index":200,"title":{},"body":{"classes/LoginDto.html":{}}}],["transform",{"_index":647,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":651,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":657,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["true",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"classes/Maintenance.html":{},"entities/Theater.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["true})@apiproperty()@isstring",{"_index":467,"title":{},"body":{"entities/Theater.html":{}}}],["true})@isemail()@apiproperty",{"_index":526,"title":{},"body":{"entities/User.html":{}}}],["true})@isstring()@apiproperty",{"_index":534,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":161,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["twitter",{"_index":792,"title":{},"body":{"index.html":{}}}],["type",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtServiceClass.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/Maintenance.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"interfaces/SwaggerConfig.html":{},"entities/Theater.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":242,"title":{},"body":{"classes/Maintenance.html":{},"entities/Movie.html":{},"injectables/MovieService.html":{},"entities/Payment.html":{},"injectables/PaymentService.html":{},"entities/Theater.html":{},"injectables/TheatreService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeormconfig",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormconfig.database",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.host",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.password",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.port",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.username",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["typeorminterface",{"_index":517,"title":{"classes/TypeOrmInterface.html":{}},"body":{"classes/TypeOrmInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([movie",{"_index":325,"title":{},"body":{"modules/MovieModule.html":{}}}],["typeormmodule.forfeature([payment",{"_index":409,"title":{},"body":{"modules/PaymentModule.html":{}}}],["typeormmodule.forfeature([theater",{"_index":503,"title":{},"body":{"modules/TheatreModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":598,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":443,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":666,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":543,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["ui",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":417,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception('incorrect",{"_index":422,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception('user",{"_index":638,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":233,"title":{},"body":{"classes/Maintenance.html":{},"injectables/ValidationPipe.html":{}}}],["unique",{"_index":471,"title":{},"body":{"entities/Theater.html":{},"entities/User.html":{}}}],["unit",{"_index":765,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":137,"title":{},"body":{"classes/JwtServiceClass.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["update",{"_index":577,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatedat",{"_index":239,"title":{},"body":{"classes/Maintenance.html":{}}}],["updatedby",{"_index":226,"title":{},"body":{"classes/Maintenance.html":{}}}],["updateddate",{"_index":227,"title":{},"body":{"classes/Maintenance.html":{}}}],["updatedtime",{"_index":241,"title":{},"body":{"classes/Maintenance.html":{}}}],["updatepassword",{"_index":556,"title":{},"body":{"entities/User.html":{}}}],["updateuser",{"_index":562,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(email",{"_index":574,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["use",{"_index":177,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(request",{"_index":178,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["used",{"_index":73,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/TheatreController.html":{},"injectables/TheatreService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":131,"title":{"entities/User.html":{}},"body":{"classes/JwtServiceClass.html":{},"entities/Payment.html":{},"modules/PaymentModule.html":{},"controllers/TheatreController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":596,"title":{},"body":{"modules/UserModule.html":{}}}],["user.createdby",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":384,"title":{},"body":{"entities/Payment.html":{}}}],["user.payment",{"_index":380,"title":{},"body":{"entities/Payment.html":{}}}],["user.service",{"_index":580,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.service",{"_index":406,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["useragent",{"_index":189,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useragent}${ip",{"_index":197,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["usercontroller",{"_index":557,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":32,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"entities/Payment.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":403,"title":{"injectables/UserService.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":644,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":661,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationpipe",{"_index":642,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":216,"title":{},"body":{"classes/LoginDto.html":{},"entities/Theater.html":{},"entities/User.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":183,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":545,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["variable",{"_index":678,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":803,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":154,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["verifyjwttoken",{"_index":125,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["verifyjwttoken(token",{"_index":152,"title":{},"body":{"classes/JwtServiceClass.html":{}}}],["version",{"_index":447,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":93,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["watch",{"_index":760,"title":{},"body":{"index.html":{}}}],["website",{"_index":790,"title":{},"body":{"index.html":{}}}],["without",{"_index":616,"title":{},"body":{"injectables/UserService.html":{}}}],["world",{"_index":68,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":780,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PaymentModule.html":{},"modules/TheatreModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nMovieModule\n\nMovieModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nTheatreModule\n\nTheatreModule\n\nAppModule -->\n\nTheatreModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MovieModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            TheatreModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './Modules/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TypeOrmConfig } from './Common/TypeOrm/typeorm.config';\nimport { TheatreModule } from './Modules/theatre/theatre.module';\nimport { MovieModule } from './Modules/movie/movie.module';\nimport { PaymentModule } from './Modules/payment/payment.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: TypeOrmConfig.host,\n      port: TypeOrmConfig.port,\n      username: TypeOrmConfig.username,\n      password: TypeOrmConfig.password,\n      database: TypeOrmConfig.database,\n      autoLoadEntities: true,\n      synchronize: true\n    }),\n    UserModule,\n    TheatreModule,\n    MovieModule,\n    PaymentModule\n  ],\n\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  // getHello(): string {\n  //   return 'Hello World!';\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                This class is used to find the exceptions for entire project\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Filters/exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n/**\n * This class is used to find the exceptions for entire project\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtServiceClass.html":{"url":"classes/JwtServiceClass.html","title":"class - JwtServiceClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtServiceClass\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Providers/jwt.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is jwt service method this is the place to generate all jwt tokens\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createJwtToken\n                            \n                            \n                                    Async\n                                deleteToken\n                            \n                            \n                                    Async\n                                verifyJwtToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/Common/Providers/jwt.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createJwtToken(data: User)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:17\n                \n            \n\n\n            \n                \n                    Create jwt token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteToken(response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:44\n                \n            \n\n\n            \n                \n                    delete jwt token method\nis clear show success meimport { User } from 'src/Entities/user.entity';\nssageimport { JwtService } from '@nestjs/jwt';\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is imported from the express library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if cookie import { User } from './../../Entities/user.entity';\nis clear show success meimport { User } from 'src/Entities/user.entity';\nssageimport { JwtService } from '@nestjs/jwt';\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyJwtToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:27\n                \n            \n\n\n            \n                \n                    verify jwt token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is recived from the method\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the verify token\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport { Response } from 'express';\nimport { User } from './../../Entities/user.entity';\n\n/**\n * This is jwt service method this is the place to generate all jwt tokens\n */\nexport class JwtServiceClass {\n  constructor(private readonly jwtService: JwtService) {}\n\n  /**\n   * Create jwt token method\n   * @param response is imported from the express library\n   * @param data is taken from the user\n   * @returns the token\n   */\n  async createJwtToken(data: User) {\n    const jwt = this.jwtService.signAsync({ id: data.id });\n    return jwt;\n  }\n\n  /**\n   * verify jwt token method\n   * @param token is recived from the method\n   * @returns the verify token\n   */\n  async verifyJwtToken(token: string): Promise {\n    try {\n      const verify = await this.jwtService.verifyAsync(token);\n      return verify;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * delete jwt token method\n   * @param response is imported from the express library\n   * @returns if cookie import { User } from './../../Entities/user.entity';\nis clear show success meimport { User } from 'src/Entities/user.entity';\nssageimport { JwtService } from '@nestjs/jwt';\n\n   */\n  async deleteToken(response: Response) {\n    response.clearCookie('jwt');\n    return {\n      message: 'you are successfully logout'\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/MiddleWare/logger.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                This method is used to return the logger related info based on middleware\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/MiddleWare/logger.middleware.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LoggerMiddleware.name)\n                    \n                \n                    \n                        \n                                Defined in src/Common/MiddleWare/logger.middleware.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n/**\n * This method is used to return the logger related info based on middleware\n */\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(LoggerMiddleware.name);\n\n  use(request: Request, response: Response, next: NextFunction): void {\n    const { ip, method, originalUrl } = request;\n\n    const userAgent = request.get('user-agent') || '';\n    response.on('finish', () => {\n      const { statusCode } = response;\n      const contentLength = response.get('content-length');\n      this.logger.log(\n        `${method} ${originalUrl} ${statusCode} ${contentLength}-${userAgent}${ip}`\n      );\n      this.logger.log(\n        'info',\n        `${method} ${originalUrl} ${statusCode} ${contentLength}-${userAgent}${ip}`\n      );\n    });\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is data transfer object Required property are maintain here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/login.dto.ts:13\n                        \n                    \n\n            \n                \n                    email property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/login.dto.ts:20\n                        \n                    \n\n            \n                \n                    password property\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString } from 'class-validator';\n\n/**\n * This is data transfer object Required property are maintain here\n */\nexport class LoginDto {\n  /**\n   * email property\n   */\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  /**\n   * password property\n   */\n  @IsString()\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Maintenance.html":{"url":"classes/Maintenance.html","title":"class - Maintenance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Maintenance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/maintenance.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a maintenance entity all maintanance related columns are avaliable here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdBy\n                            \n                            \n                                createdDate\n                            \n                            \n                                isActive\n                            \n                            \n                                updatedBy\n                            \n                            \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:21\n                        \n                    \n\n            \n                \n                    generates createdAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:31\n                        \n                    \n\n            \n                \n                    generates createTime column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:11\n                        \n                    \n\n            \n                \n                    generates isActive column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:16\n                        \n                    \n\n            \n                \n                    generates updatedAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintenance.entity.ts:26\n                        \n                    \n\n            \n                \n                    generates updatedTime column\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column } from 'typeorm';\n\n/**\n * This is a maintenance entity all maintanance related columns are avaliable here\n */\nexport class Maintenance {\n  /**\n   * generates isActive column\n   */\n  @Column({ default: true })\n  isActive: boolean;\n  /**\n   *generates updatedAt column\n   */\n  @Column({ default: ' ' })\n  updatedBy: string;\n  /**\n   *generates createdAt column\n   */\n  @Column()\n  createdBy: string;\n  /**\n   *generates updatedTime column\n   */\n  @Column({ default: ' ' })\n  updatedDate: string;\n  /**\n   * generates createTime column\n   */\n  @Column({ default: new Date().toLocaleString() })\n  createdDate: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Movie.html":{"url":"entities/Movie.html","title":"entity - Movie","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Movie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/movies.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a Movie entity class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                language\n                            \n                            \n                                movieName\n                            \n                            \n                                rating\n                            \n                            \n                                screenNumber\n                            \n                            \n                                theater\n                            \n                            \n                                theaterName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/movies.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/movies.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        movieName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/movies.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/movies.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        screenNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/movies.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        theater\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Theater[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, theater => theater.movie, {onDelete: 'CASCADE'})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/movies.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        theaterName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/movies.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn\n} from 'typeorm';\nimport { Theater } from './theater.entity';\nimport { Maintenance } from './maintenance.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * This is a Movie entity class\n */\n@Entity()\nexport class Movie extends Maintenance {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @ApiProperty()\n  language: string;\n\n  @Column()\n  @ApiProperty()\n  movieName: string;\n\n  @Column()\n  @ApiProperty()\n  screenNumber: string;\n\n  @Column()\n  @ApiProperty()\n  rating: string;\n\n  @Column()\n  @ApiProperty()\n  theaterName: string;\n\n  @ManyToMany(() => Theater, (theater) => theater.movie, {\n    onDelete: 'CASCADE'\n  })\n  @JoinTable()\n  theater: Theater[];\n\n  async addTheater(theater: Theater) {\n    if (this.theater == null) {\n      this.theater = new Array();\n    }\n    return this.theater.push(theater);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n            \n                Description\n            \n            \n                This is a movie controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMovie\n                            \n                            \n                                    Async\n                                deleteMovie\n                            \n                            \n                                    Async\n                                findMovies\n                            \n                            \n                                    Async\n                                getMovieByTheater\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMovie(data: Movie)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('addMovie')\n                \n            \n\n            \n                \n                    Defined in src/Modules/movie/movie.controller.ts:20\n                \n            \n\n\n            \n                \n                    This method is used to add movie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Movie\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMovie(movieName: string, theaterName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('deleteMovie/:movieName/:theaterName')\n                \n            \n\n            \n                \n                    Defined in src/Modules/movie/movie.controller.ts:51\n                \n            \n\n\n            \n                \n                    This method is used to delete a movie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    theaterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findMovies\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMovies(movieName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('findMovie/:movieName')\n                \n            \n\n            \n                \n                    Defined in src/Modules/movie/movie.controller.ts:40\n                \n            \n\n\n            \n                \n                    This method is used to finsd movie by movie name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMovieByTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMovieByTheater(theaterName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('findMovieByTheater/:theaterName')\n                \n            \n\n            \n                \n                    Defined in src/Modules/movie/movie.controller.ts:30\n                \n            \n\n\n            \n                \n                    This method is used to get movie by theater name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    theaterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Delete } from '@nestjs/common';\nimport { MovieService } from './movie.service';\nimport { Movie } from './../../Entities/movies.entity';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * This is a movie controller\n */\n@ApiTags('Movie Info')\n@Controller('movie')\nexport class MovieController {\n  constructor(private readonly movieService: MovieService) {}\n\n  /**\n   * This method is used to add movie\n   * @param data\n   * @returns\n   */\n  @Post('addMovie')\n  async addMovie(@Body() data: Movie) {\n    return await this.movieService.addMovie(data);\n  }\n\n  /**\n   * This method is used to get movie by theater name\n   * @param theaterName\n   * @returns\n   */\n  @Get('findMovieByTheater/:theaterName')\n  async getMovieByTheater(@Param('theaterName') theaterName: string) {\n    return await this.movieService.getMovieByTheater(theaterName);\n  }\n\n  /**\n   * This method is used to finsd movie by movie name\n   * @param movieName\n   * @returns\n   */\n  @Get('findMovie/:movieName')\n  async findMovies(@Param('movieName') movieName: string) {\n    return await this.movieService.findMovies(movieName);\n  }\n\n  /**\n   * This method is used to delete a movie\n   * @param movieName\n   * @param theaterName\n   * @returns\n   */\n  @Delete('deleteMovie/:movieName/:theaterName')\n  async deleteMovie(\n    @Param('movieName') movieName: string,\n    @Param('theaterName') theaterName: string\n  ) {\n    return await this.movieService.deleteMovie(movieName, theaterName);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\n\nMovieService\n\nMovieService\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nTheatreService\n\nTheatreService\n\nMovieModule -->\n\nTheatreService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/movie/movie.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This is a movie module all configuration all avaliabale here\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                        \n                            TheatreService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieController } from './movie.controller';\nimport { MovieService } from './movie.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Movie } from './../../Entities/movies.entity';\nimport { TheatreService } from './../theatre/theatre.service';\nimport { Theater } from './../../Entities/theater.entity';\n\n/**\n * This is a movie module all configuration all avaliabale here\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([Movie, Theater])],\n  controllers: [MovieController],\n  providers: [MovieService, TheatreService]\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/movie/movie.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a movie service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMovie\n                            \n                            \n                                    Async\n                                deleteMovie\n                            \n                            \n                                    Async\n                                findMovies\n                            \n                            \n                                    Async\n                                findOneMovie\n                            \n                            \n                                    Async\n                                getMovieByTheater\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieRepository: Repository, theatreService: TheatreService)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/movie/movie.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        theatreService\n                                                  \n                                                        \n                                                                        TheatreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMovie(data: Movie)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/movie/movie.service.ts:23\n                \n            \n\n\n            \n                \n                    This method is used to add movie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Movie\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMovie(movieName: string, theaterName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/movie/movie.service.ts:83\n                \n            \n\n\n            \n                \n                    This method is used to delete a movie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    theaterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findMovies\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMovies(movieName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/movie/movie.service.ts:56\n                \n            \n\n\n            \n                \n                    This method is used to find a movies\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneMovie(movieName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/movie/movie.service.ts:67\n                \n            \n\n\n            \n                \n                    This method is used to find one movie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMovieByTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMovieByTheater(theaterName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/movie/movie.service.ts:41\n                \n            \n\n\n            \n                \n                    This method is used to get movie by theater\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    theaterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Movie } from './../../Entities/movies.entity';\nimport { TheatreService } from './../theatre/theatre.service';\n\n/**\n * This is a movie service\n */\n@Injectable()\nexport class MovieService {\n  constructor(\n    @InjectRepository(Movie)\n    private readonly movieRepository: Repository,\n    private readonly theatreService: TheatreService\n  ) {}\n\n  /**\n   * This method is used to add movie\n   * @param data\n   * @returns\n   */\n  async addMovie(data: Movie) {\n    const getTheater = await this.theatreService.findTheater(data.theaterName);\n    const movie = new Movie();\n    if (!getTheater) {\n      throw new NotFoundException('Theater not avaliable in register list');\n    } else {\n      movie.createdBy = data.theaterName;\n      movie.addTheater(getTheater);\n      const newData = Object.assign(movie, data);\n      return await this.movieRepository.save(newData);\n    }\n  }\n\n  /**\n   * This method is used to get movie by theater\n   * @param theaterName\n   * @returns\n   */\n  async getMovieByTheater(theaterName: string) {\n    const getMovie = await this.movieRepository.find({\n      theaterName: theaterName\n    });\n    if (!getMovie) {\n      throw new NotFoundException('Theater not found');\n    }\n    return getMovie;\n  }\n\n  /**\n   * This method is used to find a movies\n   * @param movieName\n   * @returns\n   */\n  async findMovies(movieName: string) {\n    const getMovie = await this.movieRepository.find({ movieName: movieName });\n    if (!getMovie) {\n      throw new NotFoundException('movie is not avaliable in the list');\n    }\n    return getMovie;\n  }\n\n  /**\n   * This method is used to find one movie\n   */\n  async findOneMovie(movieName: string) {\n    const getMovie = await this.movieRepository.findOne({\n      movieName: movieName\n    });\n    if (!getMovie) {\n      throw new NotFoundException('movie is not avaliable in the list');\n    }\n    return getMovie;\n  }\n\n  /**\n   * This method is used to delete a movie\n   * @param movieName\n   * @param theaterName\n   * @returns\n   */\n  async deleteMovie(movieName: string, theaterName: string) {\n    const getMovie = await this.movieRepository.findOne({\n      movieName: movieName,\n      theaterName: theaterName\n    });\n    if (!getMovie) {\n      throw new NotFoundException('movie or theater not found');\n    }\n    await this.movieRepository.delete({\n      movieName: getMovie.movieName,\n      theaterName: getMovie.theaterName\n    });\n    return 'movie deleted succsfully';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Payment.html":{"url":"entities/Payment.html","title":"entity - Payment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Payment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/payment.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a Payment entity class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                movieName\n                            \n                            \n                                noOfTickets\n                            \n                            \n                                price\n                            \n                            \n                                screenNo\n                            \n                            \n                                seatOption\n                            \n                            \n                                theaterName\n                            \n                            \n                                totalPrice\n                            \n                            \n                                user\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        movieName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        noOfTickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        screenNo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seatOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        theaterName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.payment)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/payment.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n/**\n * This is a Payment entity class\n */\n@Entity()\nexport class Payment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @ApiProperty()\n  theaterName: string;\n\n  @Column()\n  @ApiProperty()\n  movieName: string;\n\n  @Column()\n  price: number;\n\n  @Column()\n  @ApiProperty()\n  screenNo: string;\n\n  @Column()\n  @ApiProperty()\n  noOfTickets: number;\n\n  @Column()\n  totalPrice: number;\n\n  @Column()\n  @ApiProperty()\n  seatOption: string;\n\n  @Column()\n  userName: string;\n\n  @ManyToOne(() => User, (user) => user.payment)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentController.html":{"url":"controllers/PaymentController.html","title":"controller - PaymentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/payment/payment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                payment\n            \n\n\n            \n                Description\n            \n            \n                This is a payment controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bookingTickets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        bookingTickets\n                        \n                    \n                \n            \n            \n                \n                    \n                    bookingTickets(data: Payment, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('bookingMovieTickets/:email')\n                \n            \n\n            \n                \n                    Defined in src/Modules/payment/payment.controller.ts:21\n                \n            \n\n\n            \n                \n                    This method is used to book tickets\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Payment\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { PaymentService } from './payment.service';\nimport { Payment } from './../../Entities/payment.entity';\n\n/**\n * This is a payment controller\n */\n@ApiTags('payment')\n@Controller('payment')\nexport class PaymentController {\n  constructor(private readonly paymentService: PaymentService) {}\n\n  /**\n   * This method is used to book tickets\n   * @param data\n   * @param email\n   * @returns\n   */\n  @Post('bookingMovieTickets/:email')\n  async bookingTickets(@Body() data: Payment, @Param('email') email: string) {\n    return await this.paymentService.bookingTickets(data, email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\n\nMovieService\n\nMovieService\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nMovieService->PaymentModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nTheatreService\n\nTheatreService\n\nPaymentModule -->\n\nTheatreService->PaymentModule\n\n\n\n\n\nUserService\n\nUserService\n\nPaymentModule -->\n\nUserService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/payment/payment.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This is a payment related module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                        \n                            PaymentService\n                        \n                        \n                            TheatreService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaymentController } from './payment.controller';\nimport { PaymentService } from './payment.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Payment } from './../../Entities/payment.entity';\nimport { UserService } from './../user/user.service';\nimport { MovieService } from './../movie/movie.service';\nimport { TheatreService } from './../theatre/theatre.service';\nimport { User } from './../../Entities/user.entity';\nimport { Movie } from './../../Entities/movies.entity';\nimport { JwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { Theater } from './../../Entities/theater.entity';\n\n/**\n * This is a payment related module\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([Payment, User, Movie, Theater])],\n  controllers: [PaymentController],\n  providers: [\n    PaymentService,\n    UserService,\n    MovieService,\n    TheatreService,\n    JwtServiceClass\n  ]\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/payment/payment.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a payment service class all business logics are avaliable here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bookingTickets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, movieService: MovieService, theatreService: TheatreService, paymentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/payment/payment.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieService\n                                                  \n                                                        \n                                                                        MovieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        theatreService\n                                                  \n                                                        \n                                                                        TheatreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paymentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        bookingTickets\n                        \n                    \n                \n            \n            \n                \n                    \n                    bookingTickets(data: Payment, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/payment/payment.service.ts:28\n                \n            \n\n\n            \n                \n                    This method is used to book the tickets\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Payment\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UserService } from './../user/user.service';\nimport { Payment } from './../../Entities/payment.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { MovieService } from './../movie/movie.service';\nimport { TheatreService } from './../theatre/theatre.service';\n\n/**\n * This is a payment service class all business logics are avaliable here\n */\n@Injectable()\nexport class PaymentService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly movieService: MovieService,\n    private readonly theatreService: TheatreService,\n    @InjectRepository(Payment)\n    private readonly paymentRepository: Repository\n  ) {}\n\n  /**\n   * This method is used to book the tickets\n   * @param data\n   * @param email\n   * @returns\n   */\n  async bookingTickets(data: Payment, email: string) {\n    const getMovie = await this.movieService.findOneMovie(data.movieName);\n    const getTheater = await this.theatreService.findTheater(data.theaterName);\n    const getUser = await this.userService.findUser(email);\n    if (!getMovie || !getTheater || !getUser) {\n      throw new UnauthorizedException('incorrect details');\n    }\n    const payment = new Payment();\n    if (data.seatOption == 'box') {\n      payment.price = getTheater.boxPrice;\n    } else if (data.seatOption == 'balcony') {\n      payment.price = getTheater.balconyPrice;\n    } else if (data.seatOption == 'bench') {\n      payment.price = getTheater.balconyPrice;\n    }\n    payment.user = getUser;\n    payment.totalPrice = data.noOfTickets * payment.price;\n    payment.userName = getUser.email;\n    const newData = Object.assign(payment, data);\n    return await this.paymentRepository.save(newData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig.html":{"url":"interfaces/SwaggerConfig.html","title":"interface - SwaggerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Config/Swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                swagger related types is declared here\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Description\n                                        \n                                \n                                \n                                        \n                                            Tags\n                                        \n                                \n                                \n                                        \n                                            Title\n                                        \n                                \n                                \n                                        \n                                            Version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerConfig {\n  Title: string;\n  Description: string;\n  Version: string;\n  Tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Theater.html":{"url":"entities/Theater.html","title":"entity - Theater","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Theater\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/theater.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a Theater entity class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                balconyPrice\n                            \n                            \n                                benchPrice\n                            \n                            \n                                boxPrice\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                movie\n                            \n                            \n                                noOfScreens\n                            \n                            \n                                rating\n                            \n                            \n                                theaterName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        balconyPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        benchPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        boxPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        movie\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Movie[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, movie => movie.theater, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        noOfScreens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        theaterName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/theater.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsString } from 'class-validator';\nimport { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Movie } from './movies.entity';\nimport { Maintenance } from './maintenance.entity';\n\n/**\n * This is a Theater entity class\n */\n@Entity()\nexport class Theater extends Maintenance {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  @ApiProperty()\n  @IsString()\n  theaterName: string;\n\n  @Column()\n  @ApiProperty()\n  @IsString()\n  location: string;\n\n  @Column()\n  @ApiProperty()\n  @IsString()\n  rating: string;\n\n  @Column()\n  @ApiProperty()\n  @IsInt()\n  noOfScreens: number;\n\n  @Column()\n  @ApiProperty()\n  @IsInt()\n  boxPrice: number;\n\n  @Column()\n  @ApiProperty()\n  @IsInt()\n  balconyPrice: number;\n\n  @Column()\n  @ApiProperty()\n  @IsInt()\n  benchPrice: number;\n\n  @Column()\n  @ApiProperty()\n  @IsString()\n  description: string;\n\n  @ManyToMany(() => Movie, (movie) => movie.theater, {\n    cascade: true,\n    onDelete: 'CASCADE'\n  })\n  movie: Movie[];\n\n  async addMovie(movie: Movie) {\n    if (this.movie == null) {\n      this.movie = new Array();\n    }\n    return this.movie.push(movie);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TheatreController.html":{"url":"controllers/TheatreController.html","title":"controller - TheatreController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TheatreController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/theatre/theatre.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                theatre\n            \n\n\n            \n                Description\n            \n            \n                This is theater controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTheater\n                            \n                            \n                                    Async\n                                deleteTheater\n                            \n                            \n                                    Async\n                                findTheater\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTheater(data: Theater)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('addTheater')\n                \n            \n\n            \n                \n                    Defined in src/Modules/theatre/theatre.controller.ts:19\n                \n            \n\n\n            \n                \n                    add theater\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Theater\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        taken from user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        add theater to database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTheater(theaterName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('deleteTheater/:theaterName')\n                \n            \n\n            \n                \n                    Defined in src/Modules/theatre/theatre.controller.ts:38\n                \n            \n\n\n            \n                \n                    This method is used delete theater\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    theaterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTheater(theaterName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('findTheater/:theaterName')\n                \n            \n\n            \n                \n                    Defined in src/Modules/theatre/theatre.controller.ts:28\n                \n            \n\n\n            \n                \n                    Find Theater\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    theaterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { TheatreService } from './theatre.service';\nimport { Theater } from './../../Entities/theater.entity';\n/**\n * This is theater controller\n */\n@ApiTags('Theater info')\n@Controller('theatre')\nexport class TheatreController {\n  constructor(private readonly theatreService: TheatreService) {}\n\n  /**\n   * add theater\n   * @param data taken from user\n   * @returns add theater to database\n   */\n  @Post('addTheater')\n  async addTheater(@Body() data: Theater) {\n    return await this.theatreService.addTheater(data);\n  }\n  /**\n   * Find Theater\n   * @param theaterName\n   * @returns\n   */\n  @Get('findTheater/:theaterName')\n  async findTheater(@Param('theaterName') theaterName: string) {\n    return await this.theatreService.findTheater(theaterName);\n  }\n\n  /**\n   * This method is used delete theater\n   * @param theaterName\n   * @returns\n   */\n  @Delete('deleteTheater/:theaterName')\n  async deleteTheater(@Param('theaterName') theaterName: string) {\n    return await this.theatreService.deleteTheater(theaterName);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TheatreModule.html":{"url":"modules/TheatreModule.html","title":"module - TheatreModule","body":"\n                   \n\n\n\n\n    Modules\n    TheatreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TheatreModule\n\n\n\ncluster_TheatreModule_providers\n\n\n\n\nTheatreService\n\nTheatreService\n\n\n\nTheatreModule\n\nTheatreModule\n\nTheatreModule -->\n\nTheatreService->TheatreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/theatre/theatre.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This is a theater module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TheatreService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TheatreController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TheatreController } from './theatre.controller';\nimport { TheatreService } from './theatre.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Theater } from './../../Entities/theater.entity';\nimport { Movie } from './../../Entities/movies.entity';\n\n/**\n * This is a theater module\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([Theater, Movie])],\n  controllers: [TheatreController],\n  providers: [TheatreService]\n})\nexport class TheatreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TheatreService.html":{"url":"injectables/TheatreService.html","title":"injectable - TheatreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TheatreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/theatre/theatre.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a theater service all business logics are avaliabale here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTheater\n                            \n                            \n                                    Async\n                                deleteTheater\n                            \n                            \n                                    Async\n                                findTheater\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(theaterRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/theatre/theatre.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        theaterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTheater(data: Theater)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/theatre/theatre.service.ts:21\n                \n            \n\n\n            \n                \n                    This method is used to add theater\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Theater\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTheater(theaterName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/theatre/theatre.service.ts:48\n                \n            \n\n\n            \n                \n                    This method is used to delete a delete\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    theaterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTheater(theaterName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/theatre/theatre.service.ts:33\n                \n            \n\n\n            \n                \n                    This method is used to find a theater\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    theaterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Theater } from './../../Entities/theater.entity';\n\n/**\n * This is a theater service all business logics are avaliabale here\n */\n@Injectable()\nexport class TheatreService {\n  constructor(\n    @InjectRepository(Theater)\n    private readonly theaterRepository: Repository\n  ) {}\n\n  /**\n   * This method is used to add theater\n   * @param data\n   * @returns\n   */\n  async addTheater(data: Theater) {\n    const theater = new Theater();\n    theater.createdBy = data.theaterName;\n    const newData = Object.assign(theater, data);\n    return await this.theaterRepository.save(newData);\n  }\n\n  /**\n   * This method is used to find a theater\n   * @param theaterName\n   * @returns\n   */\n  async findTheater(theaterName: string) {\n    const getTheater = await this.theaterRepository.findOne({\n      theaterName: theaterName\n    });\n    if (!getTheater) {\n      throw new NotFoundException('Theater not found');\n    }\n    return getTheater;\n  }\n\n  /**\n   * This method is used to delete a delete\n   * @param theaterName\n   * @returns\n   */\n  async deleteTheater(theaterName: string) {\n    const getTheater = await this.theaterRepository.findOne({\n      theaterName: theaterName\n    });\n    if (!getTheater) {\n      throw new NotFoundException('Theater not found');\n    }\n    await this.theaterRepository.delete({ theaterName: theaterName });\n    return 'deleted succsfully';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmInterface.html":{"url":"classes/TypeOrmInterface.html","title":"class - TypeOrmInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/TypeOrm/typeorm.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                TypeOrm data types Declared here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                database\n                            \n                            \n                                host\n                            \n                            \n                                password\n                            \n                            \n                                port\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Common/TypeOrm/typeorm.interface.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TypeOrmInterface {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  database: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a user entity all user related columns are avaliable here\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                payment\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        payment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Payment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, payment => payment.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString } from 'class-validator';\nimport {\n  BeforeInsert,\n  BeforeUpdate,\n  Column,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn\n} from 'typeorm';\nimport { Maintenance } from './maintenance.entity';\nimport { Payment } from './payment.entity';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bcrypt = require('bcryptjs');\n\n/**\n * This is a user entity all user related columns are avaliable here\n */\n@Entity()\nexport class User extends Maintenance {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  name: string;\n\n  @Column({ unique: true })\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  @Column({ unique: true })\n  @IsString()\n  @ApiProperty()\n  phoneNumber: string;\n\n  @Column()\n  @IsString()\n  @ApiProperty()\n  password: string;\n\n  @BeforeInsert()\n  async strongPassword() {\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n\n  @OneToMany(() => Payment, (payment) => payment.user)\n  payment: Payment[];\n\n  async addPayment(payment: Payment) {\n    if (this.payment == null) {\n      this.payment = new Array();\n    } else {\n      this.payment.push(payment);\n    }\n  }\n\n  @BeforeUpdate()\n  async UpdatePassword() {\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                This is a user controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:30\n                \n            \n\n\n            \n                \n                    This method is used to register the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        save the data in register entity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('deleteUser/:email')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:54\n                \n            \n\n\n            \n                \n                    This method is used to delete the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(data: LoginDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:41\n                \n            \n\n\n            \n                \n                    This method is used to login the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(email: string, password: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('updateUser/:email/:password')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:65\n                \n            \n\n\n            \n                \n                    This method is used to update a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Param,\n  Post,\n  Put,\n  Res\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { UserService } from './user.service';\nimport { User } from './../../Entities/user.entity';\nimport { LoginDto } from './dto/login.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * This is a user controller\n */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * This method is used to register the user\n   * @param data is taken from the user\n   * @returns save the data in register entity\n   */\n  @Post('register')\n  async createUser(@Body() data: User) {\n    return await this.userService.registerUser(data);\n  }\n\n  /**\n   * This method is used to login the user\n   * @param data\n   * @param response\n   * @returns\n   */\n  @Post('login')\n  async loginUser(\n    @Body() data: LoginDto,\n    @Res({ passthrough: true }) response: Response\n  ) {\n    return await this.userService.loginUser(data, response);\n  }\n\n  /**\n   * This method is used to delete the user\n   * @param email\n   * @returns\n   */\n  @Delete('deleteUser/:email')\n  async deleteUser(@Param('email') email: string) {\n    return await this.userService.deleteUser(email);\n  }\n\n  /**\n   * This method is used to update a user\n   * @param email\n   * @param password\n   * @returns\n   */\n  @Put('updateUser/:email/:password')\n  async updateUser(\n    @Param('email') email: string,\n    @Param('password') password: string\n  ) {\n    return await this.userService.updateUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This is a user module all configurations are avaliabale here\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\nimport { User } from './../../Entities/user.entity';\nimport { JwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { Payment } from './../../Entities/payment.entity';\n\n/**\n * This is a user module all configurations are avaliabale here\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, Payment]),\n    JwtModule.register({\n      secret: 'secrect',\n      signOptions: { expiresIn: '3h' }\n    })\n  ],\n  controllers: [UserController],\n  providers: [UserService, JwtServiceClass]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a user service all business logics are avaliabale here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtserviceClass: JwtServiceClass)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/user/user.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtserviceClass\n                                                  \n                                                        \n                                                                        JwtServiceClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:56\n                \n            \n\n\n            \n                \n                    This method is used to delete a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUser(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:85\n                \n            \n\n\n            \n                \n                    This method is used to find a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(data: LoginDto, response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:39\n                \n            \n\n\n            \n                \n                    This method is used to login the user and generate the jwt token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is teken from the user\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        user without password\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(data: User)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:27\n                \n            \n\n\n            \n                \n                    This method is used to register the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        save the data in register entity\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:71\n                \n            \n\n\n            \n                \n                    This method is used to update a user password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Response } from 'express';\nimport { User } from './../../Entities/user.entity';\nimport { JwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { LoginDto } from './dto/login.dto';\n/**This bcrypt is used to hash the password */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bcrypt = require('bcryptjs');\n\n/**\n * This is a user service all business logics are avaliabale here\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private readonly jwtserviceClass: JwtServiceClass\n  ) {}\n\n  /**\n   * This method is used to register the user\n   * @param data is taken from the user\n   * @returns save the data in register entity\n   */\n  async registerUser(data: User) {\n    const user = new User();\n    user.createdBy = data.name;\n    const userData = Object.assign(user, data);\n    return await this.userRepository.save(userData);\n  }\n\n  /**\n   * This method is used to login the user and generate the jwt token\n   * @param data is teken from the user\n   * @returns user without password\n   */\n  async loginUser(data: LoginDto, response: Response) {\n    const getUser = await this.findUser(data.email);\n    const match = await bcrypt.compare(data.password, getUser.password);\n    if (!getUser || match == false) {\n      throw new UnauthorizedException('incorrect credentials');\n    }\n    const jwt = this.jwtserviceClass.createJwtToken(getUser);\n    response.cookie('jwt', jwt, { httpOnly: true });\n    const { password, ...result } = getUser;\n    return result;\n  }\n\n  /**\n   * This method is used to delete a user\n   * @param email\n   * @returns\n   */\n  async deleteUser(email: string) {\n    const user = await this.findUser(email);\n    if (!user) {\n      throw new UnauthorizedException('user not found');\n    }\n    await this.userRepository.delete({ email: email });\n    return 'succsfully deleted';\n  }\n\n  /**\n   * This method is used to update a user password\n   * @param email\n   * @param password\n   * @returns\n   */\n  async updateUser(email: string, password: string) {\n    const user = await this.findUser(email);\n    if (!user) {\n      throw new UnauthorizedException('user not found');\n    }\n    await this.userRepository.update({ email: email }, { password: password });\n    return 'success';\n  }\n\n  /**\n   * This method is used to find a user\n   * @param email\n   * @returns\n   */\n  async findUser(email: string) {\n    const getUser = await this.userRepository.findOne({\n      email: email\n    });\n    return getUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Pipes/validation.pipes.ts\n        \n\n\n            \n                Description\n            \n            \n                This method is used to validate inputs\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: any)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Pipes/validation.pipes.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Pipes/validation.pipes.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n/**\n * This method is used to validate inputs\n */\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: any): boolean {\n    const types: any[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Common/Filters/exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/Common/MiddleWare/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/Common/Pipes/validation.pipes.ts\n            \n            injectable\n            ValidationPipe\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/Common/Providers/jwt.service.ts\n            \n            class\n            JwtServiceClass\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/Common/TypeOrm/typeorm.config.ts\n            \n            variable\n            TypeOrmConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Common/TypeOrm/typeorm.interface.ts\n            \n            class\n            TypeOrmInterface\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.config.ts\n            \n            variable\n            SWAGGER_CONFIG\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.interface.ts\n            \n            interface\n            SwaggerConfig\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.ts\n            \n            function\n            createDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/maintenance.entity.ts\n            \n            class\n            Maintenance\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/Entities/movies.entity.ts\n            \n            entity\n            Movie\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/payment.entity.ts\n            \n            entity\n            Payment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/theater.entity.ts\n            \n            entity\n            Theater\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/user.entity.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Modules/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/Modules/movie/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/Modules/payment/payment.controller.ts\n            \n            controller\n            PaymentController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Modules/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/Modules/theatre/theatre.controller.ts\n            \n            controller\n            TheatreController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/Modules/theatre/theatre.service.ts\n            \n            injectable\n            TheatreService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/Modules/user/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/Modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/Modules/user/user.service.ts\n            \n            variable\n            bcrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            mysql2 : ^2.3.3\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.41\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createDocument   (src/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/Config/Swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    This function is used to create a swagger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is imported from the nestjs commom library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        create swagger document\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TheatreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\n\nMovieModule\n\nMovieModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nTheatreModule\n\nTheatreModule\n\nAppModule -->\n\nTheatreModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\nPaymentModule -->\n\nMovieService->PaymentModule\n\n\n\n\n\nTheatreService\n\nTheatreService\n\nMovieModule -->\n\nTheatreService->MovieModule\n\n\n\nPaymentModule -->\n\nTheatreService->PaymentModule\n\n\n\nTheatreModule -->\n\nTheatreService->TheatreModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nUserService\n\nUserService\n\nPaymentModule -->\n\nUserService->PaymentModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bcrypt   (src/.../user.entity.ts)\n                        \n                        \n                            bcrypt   (src/.../user.service.ts)\n                        \n                        \n                            SWAGGER_CONFIG   (src/.../swagger.config.ts)\n                        \n                        \n                            TypeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcryptjs')\n                    \n                \n\n\n        \n    \n\n    src/Modules/user/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcryptjs')\n                    \n                \n\n            \n                \n                    This bcrypt is used to hash the password\n\n                \n            \n\n        \n    \n\n    src/Config/Swagger/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SWAGGER_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SwaggerConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  Title: 'Movie Tickets Booking App',\n  Description: 'You can book your movie tickets here',\n  Version: '1.0',\n  Tags: ['Template']\n}\n                    \n                \n\n            \n                \n                    This variable is used to configure the swagger related info\n\n                \n            \n\n        \n    \n\n    src/Common/TypeOrm/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TypeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TypeOrmInterface\n\n                    \n                \n                \n                    \n                        Default value : {\n  host: 'localhost',\n  port: 3306,\n  username: 'root',\n  password: 'root',\n  database: 'movieapp'\n}\n                    \n                \n\n            \n                \n                    all typeOrm configurations are avaliable here\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
